import{_ as o,V as i,W as l,Z as p,X as n,Y as s,$ as e,a0 as t,D as c}from"./framework-d9ea58ab.js";const r={},u=n("h1",{id:"wsl-vscode配置lc3汇编语言环境",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#wsl-vscode配置lc3汇编语言环境","aria-hidden":"true"},"#"),s(" WSL+VScode配置lc3汇编语言环境")],-1),d=n("blockquote",null,[n("p",null,[s("针对UIUC课程ECE120配置的lc3调试环境。lc3是一个简易的16位计算机模型，用于计算机CPU运行逻辑的学习，详细可见"),n("em",null,"Introduction to Computing System"),s("。主要用到了 "),n("strong",null,"Win10的WSL"),s("+"),n("strong",null,"VScode"),s(" 搭建调式环境。并且涉及了linux中"),n("strong",null,"lc3汇编器"),s("的安装。最终还做到了wsl的图形化界面以窗口形式在windows中显示。（现在wsl进化了许多，有些方法已经过时）。 这是我严格意义上的第一篇博客，写的不太成熟，杂糅了很多内容。可以看目录直接跳转。")])],-1),v=t('<h2 id="_0-引子-为什么要配置wsl上的lc3环境" tabindex="-1"><a class="header-anchor" href="#_0-引子-为什么要配置wsl上的lc3环境" aria-hidden="true">#</a> 0. 引子：为什么要配置wsl上的lc3环境？</h2><h3 id="_0-1-看不惯学校给的vm" tabindex="-1"><a class="header-anchor" href="#_0-1-看不惯学校给的vm" aria-hidden="true">#</a> 0.1 看不惯学校给的vm</h3><p>我是计算机系的，上ECE课的时候用到了《计算机系统概论》这本书。有关于lc3汇编语言的作业。</p><p>老师建议用学校封装好的linux，放在vm上跑，但我感觉vm太慢而且操作不友好。笔记本也因为内存不够的问题总是卡死，文件交互也不方便，不能直接复制帮别人检查文件。好在windows出了linux子系统（wsl），想着自己配置一个wsl的lc3环境，能省不少事。</p><p>因为之前就已经在用Ubuntu子系统学linux的操作了，索性就搜了资料配置了一个环境出来。现在配置的差不多了，但是课也快上完了。算是总结一下经验，为学弟学妹们排雷了。</p><h3 id="_0-2-wsl上写lc3的利弊" tabindex="-1"><a class="header-anchor" href="#_0-2-wsl上写lc3的利弊" aria-hidden="true">#</a> 0.2 wsl上写lc3的利弊</h3><h4 id="👍利-advantage" tabindex="-1"><a class="header-anchor" href="#👍利-advantage" aria-hidden="true">#</a> 👍利/advantage</h4><ul><li>可以用vscode或别的win端的编辑器敲代码，**代码高亮，快速文本编辑，**代码书写体验极佳。</li><li><strong>文件交互方便</strong>，通过资源管理器直接访问wsl文件系统，复制粘贴一键搞定</li><li>vscode还能配置调试任务（tasks） <strong>一键调试代码</strong>，配置一劳永逸</li><li>不用费脑子折腾万恶的vm</li></ul><h4 id="👎弊-disadvantage" tabindex="-1"><a class="header-anchor" href="#👎弊-disadvantage" aria-hidden="true">#</a> 👎弊/disadvantage</h4>',9),m=n("li",null,"需要一定的linux使用基础",-1),k=n("li",null,"配置环境需要小折腾",-1),h=n("li",null,"可能会有莫名的bug🐛",-1),b={href:"https://www.notion.so/Win10-WSL-VScode-lc3-9954594c71214bd38f9fe1ba5a5ace83",target:"_blank",rel:"noopener noreferrer"},g=t('<p>因为我也是从小白开始学起，很多都是参考别人的博客和教程，所以这里就不重复造轮子了，一些配置步骤就直接引用（转载）别人的文章了。</p><p>我的配置： 系统：win10 1903 电脑：surface pro（第五代）</p><ul><li><strong>mac</strong>本身就是Unix，用terminal就行</li><li><strong>win7</strong>因为没有Linux子系统，所以不适用本文方法，乖乖用vm跑。或者升级成win10</li></ul><h2 id="_1-安装windows的linux子系统-wsl" tabindex="-1"><a class="header-anchor" href="#_1-安装windows的linux子系统-wsl" aria-hidden="true">#</a> 1. 安装windows的linux子系统（WSL）</h2><h3 id="_1-1-从零开始安装wsl" tabindex="-1"><a class="header-anchor" href="#_1-1-从零开始安装wsl" aria-hidden="true">#</a> 1.1 从零开始安装wsl</h3><ol><li>快捷键 <code>win</code> + <code>i</code> 打开系统设置，更新win10到最新版本</li><li><code>win</code>键 打开开始菜单，键盘直接输入 <code>功能</code> 会出现搜索界面，点击 <code>启用或关闭windows功能</code></li><li>在弹出来的窗口的最下方，将 <code>适用于Linux的windows子系统</code> 打勾</li><li>在应用商店中搜索linux，会跳出来很多可选的子系统。随个人喜好选择，我用的是 <code>Ubuntu18.04</code></li><li>等待子系统安装好之后，打开应用，第一次初始化会挺久的，大概五分钟。 <strong>初始化期间不要关掉窗口</strong> ，不然会有奇奇怪怪的问题。初始化完了会让你输入用户名和密码，确认之后就可以正常使用了。</li><li>现在wsl就装好了，这是一个区别与win系统的相对独立的操作系统。目前只有命令行界面，但之后会讲到图形界面。可以输入 <code>mkdir test</code> 来创建一个名为test的文件夹，也可以输入 <code>uname -a</code> 来查看系统信息。（linux的命令行操作可以上网自己学。）</li></ol><figure><img src="http://img.gavin-get-up.com/20210624142020.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',7),q={href:"https://blog.csdn.net/u012516524/article/details/79870414",target:"_blank",rel:"noopener noreferrer"},f=t('<h3 id="_1-2-wsl的一些使用技巧" tabindex="-1"><a class="header-anchor" href="#_1-2-wsl的一些使用技巧" aria-hidden="true">#</a> 1.2 wsl的一些使用技巧</h3><ul><li>wsl的目录可以在win的资源管理器下直接访问，路径一般是 <code>C:\\Users\\YOUR_USERNAME\\AppData\\Local\\Packages\\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\\LocalState\\rootfs</code> 可以直接从里面复制文件出来。但是把外面的文件复制进去会不能识别，最好在命令行中用cp命令（因为文件系统不同，linux不能识别win的文件）</li><li>wsl命令行也可以通过在cmd或者powershell中输入 <code>bash</code> 来开启</li></ul><h2 id="_2-安装vscode和插件" tabindex="-1"><a class="header-anchor" href="#_2-安装vscode和插件" aria-hidden="true">#</a> 2. 安装vscode和插件</h2><h3 id="_2-1-安装vscode" tabindex="-1"><a class="header-anchor" href="#_2-1-安装vscode" aria-hidden="true">#</a> 2.1 安装vscode</h3>',4),_={href:"https://code.visualstudio.com/",target:"_blank",rel:"noopener noreferrer"},w=t(`<h3 id="_2-2-安装插件" tabindex="-1"><a class="header-anchor" href="#_2-2-安装插件" aria-hidden="true">#</a> 2.2 安装插件</h3><ol><li>打开vscode，左边栏第5个点进去</li><li>在最上方搜索栏输入 <code>Chinese</code> 安装搜索结果中的第一个，作者为Mircosoft的插件。</li><li>在最上方搜索栏输入 <code>remote - WSL</code> 安装搜索结果中的第一个，作者为Mircosoft的插件。</li><li>在最上方搜索栏输入 <code>LC3 Assembly</code> 安装搜索结果中作者为PaperFanz的插件。</li></ol><figure><img src="http://img.gavin-get-up.com/20210624142049.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="http://img.gavin-get-up.com/20210624142127.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_3-安装lc3编译器" tabindex="-1"><a class="header-anchor" href="#_3-安装lc3编译器" aria-hidden="true">#</a> 3. 安装lc3编译器</h2><h3 id="_3-1-更换镜像源" tabindex="-1"><a class="header-anchor" href="#_3-1-更换镜像源" aria-hidden="true">#</a> 3.1 更换镜像源</h3><p>因为wsl的ubuntu发行版真的太干净了，很多正常发行版有的软件他都没有，所以需要手动把编译lc3编译器的工具装上。鉴于国内访问外往速度感人，我们先把镜像源换成阿里云镜像。</p><p>熟悉linux操作的直接进入/etc/apt/文件夹，把当前source.list备份成source.list.backup，再用vim或nano将下面的内容覆盖原文件</p><p>看不懂上面一句的，打开资源管理器，进入<code>C:\\Users\\YOUR_USERNAME\\AppData\\Local\\Packages\\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\\LocalState\\rootfs\\etc\\apt</code> （用你的用户名代替YOUR_USERNAME）用vscode打开 <code>source.list</code> 文件，注释当前全部内容（ <code>ctrl + A</code> , <code>ctrl + /</code>），再把下面的内容复制进去，保存。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 阿里源</span>
deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse

deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse

deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse

deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse

deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进入命令行，输入下面这行命令就能更新镜像源，获得速度加成了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> update
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-2-安装组件" tabindex="-1"><a class="header-anchor" href="#_3-2-安装组件" aria-hidden="true">#</a> 3.2 安装组件</h3><p>linux安装软件很方便，只需要一行命令，这里我们安装wish gcc flex unzip wget这5个软件。打开命令行，输入</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> wish gcc flex <span class="token function">unzip</span> <span class="token function">wget</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输入密码再确认就可以了。</p><p>亲测换成阿里源速度基本是原来的10倍（网好的话可能是100倍）。</p><h3 id="_3-3-安装lc3编译器" tabindex="-1"><a class="header-anchor" href="#_3-3-安装lc3编译器" aria-hidden="true">#</a> 3.3 安装lc3编译器</h3>`,18),x={href:"https://blog.csdn.net/STURobotic/article/details/88909744",target:"_blank",rel:"noopener noreferrer"},y=n("p",null,"补充一下：",-1),L={href:"http://highered.mheducation.com/sites/0072467509/student_view0/index.html",target:"_blank",rel:"noopener noreferrer"},S=n("li",null,"下载及解压两个源文件可以用以下命令",-1),U=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## 下载lc3仿真器及编译工具</span>
<span class="token function">wget</span> http://highered.mheducation.com/sites/dl/free/0072467509/104652/lc3tools_v12.zip
<span class="token comment">## 下载c语言转lc3汇编语言转换器工具</span>
<span class="token function">wget</span> http://highered.mheducation.com/sites/dl/free/0072467509/104652/lcc.zip
<span class="token comment">## 解压压缩包</span>
<span class="token function">unzip</span> lc3tools_v12.zip
<span class="token function">unzip</span> lcc.zip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-在vscode上远程打开wsl" tabindex="-1"><a class="header-anchor" href="#_4-在vscode上远程打开wsl" aria-hidden="true">#</a> 4. 在vscode上远程打开WSL</h2><h3 id="_4-1-现在尝试用vscode连接wsl" tabindex="-1"><a class="header-anchor" href="#_4-1-现在尝试用vscode连接wsl" aria-hidden="true">#</a> 4.1 现在尝试用vscode连接wsl</h3><ol><li>打开vscode，如果你已经安装了 <strong>remote - WSL</strong> 的话，左下角会有 <code>&gt;&lt;</code> 符号，点击后在下拉栏选择 <code>New Windows</code></li><li>在弹出的新窗口中：打开vscode资源管理器（左侧栏第一个）→ <code>打开文件夹</code> → 在下拉栏中选择你要用来存放lc3相关文件的文件夹。成功打开之后，所有操作基本与编辑windows系统下的文件相同。</li></ol><figure><img src="http://img.gavin-get-up.com/20210624142306.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="http://img.gavin-get-up.com/20210624142316.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-2-一些操作细节" tabindex="-1"><a class="header-anchor" href="#_4-2-一些操作细节" aria-hidden="true">#</a> 4.2 一些操作细节</h3><ul><li>文件的复制、移动、删除等操作可以子啊左侧资源管理器里，通过拖拽完成。delete是 <strong>永久删除</strong> 不能恢复。在windows资源管理器中（<code>C:\\Users\\YOUR_USERNAME\\AppData\\Local\\Packages\\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\\LocalState\\rootfs</code>）复制移动后，可能在wsl中不能识别而没有显示。</li><li>linux系统和windows系统的 <strong>换行符</strong> 不同。简单来说就是 <ul><li>对linux系统的文件，右下角一排中选择 <code>LF</code></li><li>对windows系统的文件，右下角一排中用 <code>CRLF</code></li></ul></li></ul><h2 id="_5-在vscode上写lc3汇编语言" tabindex="-1"><a class="header-anchor" href="#_5-在vscode上写lc3汇编语言" aria-hidden="true">#</a> 5. 在vscode上写lc3汇编语言</h2>`,9),j=n("code",null,"扩展（左侧栏四个小方形那个）",-1),E={href:"https://www.notion.so/Win10-WSL-VScode-lc3-9954594c71214bd38f9fe1ba5a5ace83",target:"_blank",rel:"noopener noreferrer"},W=n("code",null,"install in WSL",-1),C=n("li",null,"打开vscode资源管理器，新建一个文件test.asm，注意以.asm扩展名结尾。",-1),D=n("li",null,[s("打开这个文件，就能快乐的用vscode写lc3了。从此"),n("strong",null,"多行复制，代码片段，语法高亮，TODO tree"),s("都有了，而且启动嗖嗖的快，颜值唰唰滴高。vm有生灵倒悬之急，岂不美哉？")],-1),z=t(`<figure><img src="http://img.gavin-get-up.com/20210624142331.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_6-在vscode上调试lc3程序【重点】❗" tabindex="-1"><a class="header-anchor" href="#_6-在vscode上调试lc3程序【重点】❗" aria-hidden="true">#</a> 6. 在vscode上调试lc3程序【重点】❗</h2><h3 id="_6-1-lc3的编译过程" tabindex="-1"><a class="header-anchor" href="#_6-1-lc3的编译过程" aria-hidden="true">#</a> 6.1 lc3的编译过程</h3><p>想要调试lc3，首先要知道他是怎么工作的。这也是学习lc3的一部分。</p><p>你写的汇编伪代码会经过两轮pass，生成.sym和.obj文件。.obj文件（也就是机器码）再被lc3sim仿真器读取，由仿真器来模拟lc3执行代码的过程。</p><p>因此，一般而言，调试lc3汇编代码需要两行命令， <code>lc3as test.asm</code> 和 <code>lc3sim test.obj</code> 有时候需要打印输出还要 <code>lc3sim -s testcommand &gt; myoutfile</code> 等等。可是这些重复的输入能不能简单一点呢？</p><p>当然可以，这里就用到了vscode的“tasks”功能，把重复的工作化简。</p><h3 id="_6-2-用tasks化简调试过程" tabindex="-1"><a class="header-anchor" href="#_6-2-用tasks化简调试过程" aria-hidden="true">#</a> 6.2 用tasks化简调试过程</h3><p>你可以把vscode的tasks看作是<strong>一键执行预定脚本</strong>的功能。把调试命令设置好后，只需要一键就可以重复调用。具体操作如下</p><p>若你没有改过快捷键绑定，在文本编辑界面 <code>ctrl + shift + B</code> 就会弹出配置任务（tasks）的下拉栏 → 配置任务 → Others。一个名为tasks.json的文件会创建在.vscode文件夹内，这是vscode放置当前工作区配置的文件夹，不要删去。</p><details class="custom-container details"><summary>用下面的代码覆盖里面的内容，把注释的地方改成自己对应安装的。</summary><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>    <span class="token punctuation">{</span>
        <span class="token comment">// See https://go.microsoft.com/fwlink/?LinkId=733558</span>
        <span class="token comment">// for the documentation about the tasks.json format</span>
        <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2.0.0&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;tasks&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
                <span class="token property">&quot;label&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lc3as asmble&quot;</span><span class="token punctuation">,</span>              <span class="token comment">//之后调用时显示的名字</span>
                <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;shell&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;command&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$HOME/bin/lc3as&quot;</span><span class="token punctuation">,</span>       <span class="token comment">//改成你的lc3as的路径</span>
                <span class="token property">&quot;args&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                    <span class="token string">&quot;\${fileBasename}&quot;</span>               <span class="token comment">//command+args就是你给命令行的信号，这里相当于lc3as test.asm</span>
                <span class="token punctuation">]</span><span class="token punctuation">,</span>
                <span class="token property">&quot;options&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token property">&quot;cwd&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\${fileDirname}&quot;</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token property">&quot;presentation&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token property">&quot;echo&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;reveal&quot;</span><span class="token operator">:</span> <span class="token string">&quot;always&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;focus&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;panel&quot;</span><span class="token operator">:</span> <span class="token string">&quot;shared&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;showReuseMessage&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;clear&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token property">&quot;group&quot;</span><span class="token operator">:</span> <span class="token string">&quot;build&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;problemMatcher&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token property">&quot;label&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lc3sim simulate&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;shell&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;command&quot;</span><span class="token operator">:</span> <span class="token string">&quot;$HOME/bin/lc3sim&quot;</span><span class="token punctuation">,</span>          <span class="token comment">//改成你的lc3sim的路径</span>
                <span class="token property">&quot;args&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                    <span class="token string">&quot;\${fileBasenameNoExtension}.obj&quot;</span>    <span class="token comment">//这里相当于lc3sim test.obj</span>
                <span class="token punctuation">]</span><span class="token punctuation">,</span>
                <span class="token property">&quot;options&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token property">&quot;cwd&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\${fileDirname}&quot;</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token property">&quot;presentation&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                    <span class="token property">&quot;echo&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;reveal&quot;</span><span class="token operator">:</span> <span class="token string">&quot;always&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;focus&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;panel&quot;</span><span class="token operator">:</span> <span class="token string">&quot;shared&quot;</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;showReuseMessage&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                    <span class="token property">&quot;clear&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token property">&quot;group&quot;</span><span class="token operator">:</span> <span class="token string">&quot;build&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;problemMatcher&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                <span class="token property">&quot;label&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lc3 CLI debug&quot;</span><span class="token punctuation">,</span>                  <span class="token comment">//这个task用来整合上面两个tasks，能一键编译加调试</span>
                <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;shell&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;dependsOrder&quot;</span><span class="token operator">:</span> <span class="token string">&quot;sequence&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;dependsOn&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                    <span class="token string">&quot;lc3as asmble&quot;</span><span class="token punctuation">,</span>
                    <span class="token string">&quot;lc3sim simulate&quot;</span>
                <span class="token punctuation">]</span><span class="token punctuation">,</span>
                <span class="token property">&quot;group&quot;</span><span class="token operator">:</span> <span class="token string">&quot;build&quot;</span><span class="token punctuation">,</span>
                <span class="token property">&quot;problemMatcher&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>这样一来，回到文本编辑的地方就可以通过按下<code>ctrl + shift + B</code> 来调用tasks啦。调用成功🎉🎉🎉</p><figure><img src="http://img.gavin-get-up.com/20210624142346.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_6-3-调试的注意事项" tabindex="-1"><a class="header-anchor" href="#_6-3-调试的注意事项" aria-hidden="true">#</a> 6.3 调试的注意事项</h3>`,14),M=n("li",null,"建议先用lc3 asmble测试编译，到编译成功后再用lc3sim来调试。 因为直接用lc3sim相当于连着使用了lc3 asmble和lc3 simulate两个tasks，这样lc3as的输出会一闪而过，如果编译没有成功的话，.obj文件没有更新，调试的仍是修改前代码对应的.obj文件。",-1),A=n("li",null,[s("用lc3sim调试完了之后，"),n("strong",null,[s("记得用 "),n("code",null,"quit"),s(" 命令退出")]),s("，不然下一次不会进入新文件的调试环境。")],-1),N=n("li",null,"有测试文件或输出要求的也可以实现，就是新建几个对应命令的tasks，再用类似lc3sim的task连接起来。",-1),O={href:"https://code.visualstudio.com/docs/editor/tasks#vscode",target:"_blank",rel:"noopener noreferrer"},R=n("s",null,"换一个脑子",-1),I=n("li",null,"不知道能不能用debug功能实现和lc3sim的对接，没有研究，要是可以的话就能F5一键调试了。但是断点好像不能传递给lc3sim。😝反正我学完lc3了，以后都不用了，不折腾了。而且现在也挺方便。",-1),P=n("h2",{id:"_7-通过vscode可视化调试lc3程序【重点】❗❗",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-通过vscode可视化调试lc3程序【重点】❗❗","aria-hidden":"true"},"#"),s(" 7. 通过vscode可视化调试lc3程序【重点】❗❗")],-1),V=n("p",null,[s("单单把命令行的调试界面整合到vscode中似乎还不够方便，用vm的同学一个 "),n("code",null,"lc3sim-tk"),s(" 的图形化界面就把黑底白字的命令行比下去了。那既然都是重复调用命令，能不能也用tasks来启动图形化的调试界面呢？")],-1),Y=n("h3",{id:"_7-1-win10子系统的图形化界面",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-1-win10子系统的图形化界面","aria-hidden":"true"},"#"),s(" 7.1 win10子系统的图形化界面")],-1),$={href:"http://baijiahao.baidu.com/s?id=1596652006568524478&wfr=spider&for=pc",target:"_blank",rel:"noopener noreferrer"},B={href:"http://baijiahao.baidu.com/s?id=1596652006568524478&wfr=spider&for=pc",target:"_blank",rel:"noopener noreferrer"},F=t(`<li><p>总结一下这篇教程里的具体命令操作，方便以后回看</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#第一种方法（远程桌面）</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> xorg xfce4 xrdp
<span class="token function">sudo</span> <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;s/port=3389/port=3390/g&#39;</span> /etc/xrdp/xrdp.ini
<span class="token function">sudo</span> <span class="token builtin class-name">echo</span> xfce4-session <span class="token operator">&gt;</span>~/.xsession
<span class="token function">sudo</span> <span class="token function">service</span> xrdp restart
<span class="token comment">#win自带的远程桌面连接到127.0.0.1:3390，127.0.0.1是本地机器的回送ip地址。</span>

<span class="token comment">#第二种方法</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> xorg xfce4 openssh-server
<span class="token comment">#windows安装xming，启动xming</span>
<span class="token environment constant">DISPLAY</span>:<span class="token operator">=</span><span class="token number">0</span> lc3sim-tk    <span class="token comment">#跟着你要启动的图形化程序命令</span>
<span class="token comment">#就可以在win中弹出linux的图形化窗口了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>一些小技巧</p><ol><li>进入xming launch可以选择不同的窗口显示方式。</li><li>进入~/.bashrc，添加 <code>alias D=&#39;DISPLAY:=0&#39;</code> ，可以把DISPLAY:=0化简成“D”，以后就可以用 <code>D lc3sim-tk</code> 来启动了</li></ol></li>`,2),G=t(`<h3 id="_7-2-用vscode启动图形化调试界面" tabindex="-1"><a class="header-anchor" href="#_7-2-用vscode启动图形化调试界面" aria-hidden="true">#</a> 7.2 用vscode启动图形化调试界面</h3><p>原理还是一样，用tasks来代替重复输入命令。把下面的代码复制到tasks.json文件前几个tasks的后面，就可以了。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>        <span class="token punctuation">{</span>
            <span class="token property">&quot;label&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lc3sim-tk simulate&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;shell&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;command&quot;</span><span class="token operator">:</span> <span class="token string">&quot;DISPLAY=:0&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;args&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token string">&quot;/home/gavin/bin/lc3tools/lc3sim-tk&quot;</span><span class="token punctuation">,</span>  <span class="token comment">//改成你的lc3sim-tk的路径</span>
                <span class="token string">&quot;\${fileBasenameNoExtension}.obj&quot;</span>       <span class="token comment">//这里相当于DISPLAY:=0 lc3sim-tk test.obj</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">&quot;options&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">&quot;cwd&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\${fileDirname}&quot;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token property">&quot;presentation&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token property">&quot;echo&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                         <span class="token comment">//因为是图形化界面，所以就不用显示命令行的输出了</span>
                <span class="token property">&quot;reveal&quot;</span><span class="token operator">:</span> <span class="token string">&quot;never&quot;</span>
            <span class="token punctuation">}</span>
            <span class="token property">&quot;group&quot;</span><span class="token operator">:</span> <span class="token string">&quot;build&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;problemMatcher&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;label&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lc3 tk debug&quot;</span><span class="token punctuation">,</span>                  <span class="token comment">//这个task用来整合上编译和图形化的界面，能一键编译加调试</span>
            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;shell&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;dependsOrder&quot;</span><span class="token operator">:</span> <span class="token string">&quot;sequence&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;dependsOn&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token string">&quot;lc3as asmble&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;lc3sim-tk simulate&quot;</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">&quot;group&quot;</span><span class="token operator">:</span> <span class="token string">&quot;build&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;problemMatcher&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，图形化就完成了，所有vm中的所有功能关于lc3都能在vscode中实现了。✨🎉✨🎉</p><figure><img src="http://img.gavin-get-up.com/20210624142406.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="end" tabindex="-1"><a class="header-anchor" href="#end" aria-hidden="true">#</a> .END</h2>`,6);function T(H,X){const a=c("ExternalLinkIcon");return i(),l("div",null,[u,d,p(" more "),v,n("ul",null,[m,k,h,n("li",null,[s("win和linux文件系统不兼容，不注意会有换行符的问题（都用vscode就没事，见"),n("a",b,[s("后文"),e(a)]),s("）")])]),g,n("p",null,[n("a",q,[s("CSDN详细的图文教程"),e(a)]),s("，但我觉得我说的挺清楚")]),f,n("p",null,[s("进入"),n("a",_,[s("vscode官网"),e(a)]),s("，下载最新版本的vscode，安装")]),w,n("p",null,[s("具体安装就参照"),n("a",x,[s("这一篇文章"),e(a)]),s(" 吧，写的很详细")]),y,n("ul",null,[n("li",null,[s("强烈建议查看📑"),n("a",L,[s("官网的说明文档"),e(a)]),s("，有详细的使用说明，可以解决很多问题")]),S]),U,n("ol",null,[n("li",null,[s("在远程wsl模式下的vscode中，打开 "),j,s("，把之前安装的"),n("a",E,[s("三个插件"),e(a)]),s(),W]),C,D]),z,n("ol",null,[M,A,N,n("li",null,[s("tasks文件的具体书写规则上📑"),n("a",O,[s("官方文档"),e(a)]),s("看吧（不愿意看英文的可以 "),R,s(" 用chrome网页翻译代替）。用好了能有骚操作，对别的语言也是如此。")]),I]),P,V,Y,n("ol",null,[n("li",null,[n("p",null,[s("具体的方法就参照"),n("a",$,[s("这篇教程"),e(a)]),s("来就行了。推荐使用第二个方法，也就是xming方案。这样可以让弹出的窗口和win的窗口并列，沉浸式的debug体验极佳。")]),n("p",null,[n("a",B,[s("Win10子系统安装图形化界面的两种方法"),e(a)])])]),F]),G])}const J=o(r,[["render",T],["__file","setup-wsl-lc3.html.vue"]]);export{J as default};
