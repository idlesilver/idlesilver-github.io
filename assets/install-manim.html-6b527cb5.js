import{_ as s,V as i,W as l,X as e,Y as a,$ as t,Z as o,a0 as r,D as c}from"./framework-d9ea58ab.js";const d={},p=e("h1",{id:"manim的安装",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#manim的安装","aria-hidden":"true"},"#"),a(" Manim的安装")],-1),m=e("strong",null,"manim",-1),u=e("strong",null,"3B1B",-1),h={href:"https://www.bilibili.com/video/BV12K4y1A7NA",target:"_blank",rel:"noopener noreferrer"},v=r(`<h2 id="manim安装的踩坑" tabindex="-1"><a class="header-anchor" href="#manim安装的踩坑" aria-hidden="true">#</a> manim安装的踩坑</h2><p>按道理说，跟着网上的教程来一步一步走是不会出问题的。但是我电脑内存快不够了，同时又想把manim装在WSL里，于是踩下了好多的坑。这里总结一下：</p><h3 id="首先是python相关的安装" tabindex="-1"><a class="header-anchor" href="#首先是python相关的安装" aria-hidden="true">#</a> 首先是python相关的安装</h3><ul><li>用conda创建环境是可以的，这样可以一个系统多个版本。我用miniconda新建了环境，python版本3.7。这个环境中安装python依赖库还是推荐 <code>pip</code> git下来的 <code>requirements.txt</code> ，虽然conda里面用pip废一点点空间，但是真的方便很多，不用走弯路。</li><li>总体来说就是conda建完环境之后跟着manim的 <code>readme.md</code> 来就行了。嫌速度慢可以换成清华源</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>conda create <span class="token parameter variable">-n</span> manim <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.7</span> <span class="token comment">#-n 表示环境的名称</span>
conda activate manim
<span class="token builtin class-name">cd</span> <span class="token string">&quot;the path of your project&quot;</span>
<span class="token function">git</span> clone https://github.com/3b1b/manim.git
<span class="token builtin class-name">cd</span> manim
pip3 <span class="token function">install</span> manimlib
python3 <span class="token parameter variable">-m</span> pip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="然后是其他的依赖安装" tabindex="-1"><a class="header-anchor" href="#然后是其他的依赖安装" aria-hidden="true">#</a> 然后是其他的依赖安装</h3><ul><li><p><code>sox</code> 和<code>ffmpeg</code>应该没有问题，直接apt就行。cairo也是apt，命令上官网搜。但是tex出了问题。因为有两个win和wsl两个相对独立的环境，两边都装texlive硬盘容量吃不消，于是想压榨空间。但是很不巧，失败了。</p><ul><li>一开始为了省空间在wsl安装了 <code>miktex</code>，花了一点时间，但是相关的tex编辑器是可以用的（vscode的远程tex）。所以我就以为装好了。但是结果运行manim的时候出错了，报错信息如下。具体原因在svg_modules中，似乎是svg文件生成出错了。试了很多方法之后，发现问题出在miktex缺少一些tex组件。把miktex卸载了，重新装 <code>texlive-full</code> 就行了。</li><li>嫌速度慢可以换成阿里源</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> sox ffmpeg texlive-full libcairo2-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h3 id="尝试跑一下example" tabindex="-1"><a class="header-anchor" href="#尝试跑一下example" aria-hidden="true">#</a> 尝试跑一下example</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python3 ./manim.py example_scenes.py OpeningManimExample-pl
python3 ./manim.py example_scenes.py SquareToCircle <span class="token parameter variable">-pl</span>
python3 ./manim.py example_scenes.py WarpSquare <span class="token parameter variable">-pl</span>
python3 ./manim.py example_scenes.py WriteStuff <span class="token parameter variable">-pl</span>
python3 ./manim.py example_scenes.py UpdatersExample <span class="token parameter variable">-pl</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="最后是一些出现的问题的记录" tabindex="-1"><a class="header-anchor" href="#最后是一些出现的问题的记录" aria-hidden="true">#</a> 最后是一些出现的问题的记录</h3><ul><li>运行了example，发现SquareToCircle这样不涉及文字的可以正常运行，但是有文字组件的（TexMobjct）编译不能通过。会报错 <code>UserWarning: g0-84 not recognized</code> ，并回溯到 <code>break_up_by_substrings</code> 函数出现list index out of range。原因是生成的svg的元素没有正确读入svgMobject中，导致尝试索引一个空list。 <ul><li>解决方法是：卸载了miktex，安装texlive-full（texlive不行）。</li></ul></li></ul>`,11);function b(x,_){const n=c("ExternalLinkIcon");return i(),l("div",null,[p,e("p",null,[m,a("是"),u,a("用来做演示视频的python库，涉及到代码控坐标系、图形、文字等。同时有一些进阶的内容，用于控制视频、音乐等。实例可见"),e("a",h,[a("这个视频"),t(n)]),a("。")]),o(" more "),v])}const g=s(d,[["render",b],["__file","install-manim.html.vue"]]);export{g as default};
