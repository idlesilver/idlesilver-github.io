[{"id":"e7f6301004af13a215f073c139d4a96b","title":"Zsh配置","content":"\n 引子\n\n\n\n\n\n\n\n\n\n换了新电脑，终于忍不住还是想折腾一下terminal。把去个性化丢到一边了。为了美观用了zsh，部分shell的脚本不能用了。插件管理用了oh-my-zsh和zinit。OMZ方便管理，zinit提升速度。主题用了Powerlevel10k。还有一些常用的插件：zsh-z，zsh-autosuggestions，syntax-highlighting\n\n引子\n0. 总览\n\n1.1 zsh\n1.2 oh-my-zsh\n\n\npart 2. 安装zinit\n\n2.1 根据github的教程\n2.2 第一次zinit使用的配置\n\n\npart 3. 配置.zshrc\n\n3.1 主题Theme设置\n3.2 插件plugin设置\n\n\npart 4. 主题配置\n\n4.1 字体配置\n4.2 其他配置\n\n\npart 5. 其他软件的环境初始化\n\n5.1 conda\n\n\n\n\n 0. 总览\n最终效果长这样\n\n 1.1 zsh\n直接安装\n# apt install\nsudo apt install zsh\n# change the shell\nchsh -s $(which zsh)\n第一次启动时会有一系列选项，我觉得要改的就只有history的存放位置。我选了放在默认的 .histfile 里\n 1.2 oh-my-zsh\n直接根据官网的流程https://ohmyz.sh/\n# install oh-my-zsh\nsh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n装完之后，先不要调整.zshrc的设置，插件用zinit装\n part 2. 安装zinit\n 2.1 根据github的教程\n官方项目：https://github.com/zdharma/zinit#automatic-installation-recommended\n# install zinit\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/zdharma/zinit/master/doc/install.sh)\"\n 2.2 第一次zinit使用的配置\n此时重启terminal会提示是否安装4个默认的常用插件，选择确认安装就行\nzinit-zsh---z-a-as-monitor\nzinit-zsh---z-a-bin-gem-node\nzinit-zsh---z-a-patch-dl\nzinit-zsh---z-a-rust\n part 3. 配置.zshrc\n 3.1 主题Theme设置\npowerlevel10k 不是oh-my-zsh自带的，需要安装，这里通过zinit来装：\n\n\n注释掉 # ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;\n\n\n在四个默认插件之后加上这一段：\n # Load a few important annexes, without Turbo\n# (this is currently required for annexes)\nzinit light-mode for \\\n    zinit-zsh/z-a-rust \\\n    zinit-zsh/z-a-as-monitor \\\n    zinit-zsh/z-a-patch-dl \\\n    zinit-zsh/z-a-bin-gem-node\n\n# Load powerlevel10k theme\nzinit ice depth\"1\" # git clone depth\nzinit light romkatv/powerlevel10k\n\n\n 3.2 插件plugin设置\n在四个默认插件之后加上这一段：\n这里使用 light是为了加速zsh的启动\n# Load a few important annexes, without Turbo\n# (this is currently required for annexes)\nzinit light-mode for \\\n    zinit-zsh/z-a-rust \\\n    zinit-zsh/z-a-as-monitor \\\n    zinit-zsh/z-a-patch-dl \\\n    zinit-zsh/z-a-bin-gem-node\n\nzinit light zsh-users/zsh-autosuggestions\nzinit light zdharma/fast-syntax-highlighting\nzinit light agkozak/zsh-z\n part 4. 主题配置\n 4.1 字体配置\n为了支持powerlevel10k的花里胡哨的功能，这里选择 MesloLGS NF 字体。\n注意，要先把terminal的字体换成MesloLGS NF 之后在进行powerlevel10k的配置，否则有些图形还是看不了。\n\nMesloLGS NF Regular.ttf\nMesloLGS NF Bold.ttf\nMesloLGS NF Italic.ttf\nMesloLGS NF Bold Italic.ttf\n\n 4.2 其他配置\n通过 p10k configure 开始配置，对照这下图来一步一步选就行\n\n part 5. 其他软件的环境初始化\n 5.1 conda\n直接用init命令就行\nconda init zsh","slug":"zsh-configuration","date":"2021-06-17T12:27:14.000Z","categories_index":"Tech,Linux,Terminal,Zsh","tags_index":"shell beautify,zsh","author_index":"Gavin"},{"id":"1a4f2d9f3319aa9a9339c81e7ef1b6d4","title":"Setup Blog","content":"\n记录了博客建站部署的全过程。包括框架，主题，配置，插件，工作流等等。\n 引子\n\n\n\n\n\n\n\n\n\n之前折腾过 Gridea，Notion的博客框架，但最终因为懒而放弃了自己建博客网站，直接用notion的界面来做。但是最近notion越来越卡，所以花了将近两天时间新建了一个个人博客部并署到了github上。希望今后能提高写博文的频率。本文的内容有较多花里胡哨的内容，旨在练习新的 markdown 格式，技术文章要减少这样的内容\n\n引子\n0. 总览\n1. 静态博客框架Hexo\n\nNode.js环境搭建\nHexo框架安装\n\n\n2. Aurora主题\n3. 插件\n\nmarkdown 渲染器\nhexo-tag-plantuml 流程图渲染器\nhexo-renderer-stylus 渲染器\n部署到github个人主页\n\n\n4. 工作流程\n\n迁移\n写文章\n图床\n\n\n5. 持续更新中。。。\n\n\n 0. 总览\n找到了好看的主题，自己稍微配置之后就有这样的效果了。开发 Aurora 的大佬真厉害！\n\n 1. 静态博客框架Hexo\n Node.js环境搭建\n在 wsl 环境中安装了 nvm 用于管理 Node.js 环境，在后续安装的过程中发现提前选择 nvm 真是明治的选择，省了许多重装找包的时间。\n# 安装nvm\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash\n\n# 以下代码放入shell配置文件中，如.bashrc, .zshrc\nexport NVM_DIR=\"$([ -z \"$&#123;XDG_CONFIG_HOME-&#125;\" ] &amp;&amp; printf %s \"$&#123;HOME&#125;/.nvm\" || printf %s \"$&#123;XDG_CONFIG_HOME&#125;/nvm\")\"\n[ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; \\. \"$NVM_DIR/nvm.sh\" # This loads nvm\n\n# 重载 bash / zsh\nsource ~/.bashrc\nsource ~/.zshrc\n\n# 安装nodejs和npm\nnvm install node # 最新版\nnvm install 14.17.0 # 最近的稳定版\n\n\n\n\n\n\n版本选择\n我这里选择了最新版的 Node.js：16.3.0，npm：7.15.0，之后 npm 又手动升级到了7.17.0。\n安装 Aurora 主题的时候还是出现了 css-what 这个包的错误，提示有DoS攻击漏洞。估计是最新版npm没有收录， npm audit fix 无效。过一段时间再试试\n\n\n\n\n\n\n\n\n\nWSL 环境\n如果是在 wsl 环境运行 npm 并且源代码放在 windows 的文件系统中，需要保证 windows 系统也装有 node.js 。否则会报错\nnpm WARN tar EPERM: operation not permitted, futime\n\n\n具体安装主要参考了Ubuntu 安装 Node.js 的正确姿势\n其他涉及的网站：\n\nnvm-sh/nvm - Github\n使用 nvm 管理不同版本的 node 与 npm | 菜鸟教程 (runoob.com)\nnvm安装与使用 - #Empty - 博客园 (cnblogs.com)\n\n Hexo框架安装\n主要参考快速使用 Hexo 搭建个人博客_哔哩哔哩_bilibili的前几集。其实没有什么复杂的地方。就是以下的代码。\n\nHexo安装\n初次安装\nnpm install hexo-cli -g # 全局安装hexo\nhexo init hexoBlog # 初始化博客目录\ncd hexoBlog # 进入目录\nnpm install # 安装需要的库\nhexo server # 启动本地服务器\n已有hexo源码文件夹，直接在根目录下\nnpm install hexo-cli -g # 全局安装hexo\nnpm install # 根据package.json安装所需的包\n\n\n这些代码执行完之后，就能够在访问本地端的博客了。如果不想折腾，到这一步就可以用了。 Hexo 原生配置参考文档 | Hexo。之后是我个性化的 主题，插件和工作流程 的记录。\n 2. Aurora主题\n在网上找了许多的主题，觉得好看的有许多 NexT, matery, fluid, casper。但是真正经验到我的就只有正在用的这一个aurora。\n安装步骤没有什么好多说的文档写的很清楚。\n\n\n\n\n\n\n\n注意！！！\nnpm 的依赖会有一些问题，需要保证 npm 的更新和依赖处理:\n\n装的时候碰到了 css-what 的版本过低，准备等 npm 更新到稳定版再说。暂时没有使用上的问题。\n缺少 truncate-html，用npm i truncate-html装了就行。\n\nAurora 主题的配置很多是自己搞了一套的，需要在 _config.aurora.yml 里配置，和普通的主题不一样\n使用图标的时候，有一种 font awesome 的选择。可以在开始使用 – Font Awesome 中文网页面输入邮箱获取cdn。要放在 _config.aurora.yml 的injects 里。阿里的 iconfont 不好用。\n\n\n 3. 插件\n markdown 渲染器\nhexo-renderer-markdown-it-plus把多个常用的markdown渲染打包了，比较实用。参考hexo markdown渲染器安装就行。具体效果可以看Markdown Demo\n\n\n\n\n\n\n\n注意\n一定要在 _config.aurora.yml 记得注入css文件，否则latex公式不能渲染\n- &lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.9.0/katex.min.\n\n\n\n_config.yml的配置\n# markdown render\nmarkdown_it_plus:\n    highlight: true\n    html: true\n    xhtmlOut: true\n    breaks: true\n    langPrefix:\n    linkify: true\n    typographer:\n    quotes: “”‘’\n    pre_class: highlight\n    plugins:\n        - plugin:\n            name: markdown-it-mark\n            enable: true\n        - plugin:\n            name: markdown-it-toc-and-anchor\n            enable: true\n            options:\n                toc: true\n                tocClassName: 'markdownIt-TOC'\n                tocFirstLevel: 1\n                tocLastLevel: 6\n                # tocCallback:\n                anchorLink: true\n                anchorLinkSymbol: ''\n                anchorFirstLevel: 1\n                anchorLastLevel: 6\n                anchorLinkSpace: true\n                anchorLinkSymbolClassName:\n                anchorLinkBefore: true\n                anchorClassName: 'markdownIt-Anchor'\n                resetIds: true\n\n\n hexo-tag-plantuml 流程图渲染器\n直接看：Hexo UML | ZRL (ruleizhou.github.io)\n简单版：【Hexo】使用PlantUML插件画UML图 | 大专栏 (dazhuanlan.com)。\n还有一个其他的流程图插件【Hexo插件系列】流程图、时序图、 | ESON，没看过，但是应该也有用。\n hexo-renderer-stylus 渲染器\n官方推荐的主题渲染器，但是 Aurora 用不到。换主题无法显示的时候需要装。\n 部署到github个人主页\n参考GitHub+Hexo 搭建个人网站详细教程 - 知乎 (zhihu.com)的 git ssh配置 ，发布deploy配置 和 hexo-deployer-git插件 这几块内容。\n\n\n\n\n\n\n提示\n文章中 git cli 配置了 ssh 但是在发布的时候没有用到\n# _config.yml\ndeploy:\n  type: 'git'\n  repo: git@github.com:idlesilver/idlesilver.github.io.git # 是git仓库的ssh链接，不是https\n  branch: master\n\n\n 4. 工作流程\n 迁移\nnotion , CSDN 导出为markdown。调整格式之后导入\n 写文章\n经过一番折腾，觉得draft没有必要。 Aurora 基于 Vue3 导致 hexo publish 的时候categories和tags不能正常继承。\n直接用：\nhexo new [layout] title\n想要不显示出来就调整 Front-matter 中的时间 date， 然后在 _config.yml 里设置未来博文不显示\n# _config.yml\n# Writing\n...\nrender_drafts: false # 不显示草稿\nrelative_link: false\nfuture: true #定时发布？\n...\n 图床\n两种解决方案：\n\n\n_config.yml 里 post_asset_folder: true 图片放在同名文件夹下\n\n\n使用千牛云等图床，详见 快速使用 Hexo 搭建个人博客 p8 _哔哩哔哩_bilibili 的第8P。\n\n\n最终选择了购买域名和配置图床：\n参考文章：\n\n七牛云配置 七牛云+阿里云搭建免费图床（已填坑，放心食用）_Maycope的博客-CSDN博客\n设置二级域名 七牛图床添加阿里云域名 - 知乎 (zhihu.com)\n不设置域名的简化使用方法 七牛云和Github如何使用PicGo设置免费图床_一个骚年的博客-CSDN博客\n\n亲测七牛云北美服务器回传速度够快。\n 5. 持续更新中。。。\n","slug":"setup-blog","date":"2021-06-14T11:52:19.000Z","categories_index":"Tech,MyBlog","tags_index":"Markdown,Memorandum,hexo-theme-aurora","author_index":"Gavin"},{"id":"bc5c6a9dd808c575878a67a8ea62b3fe","title":"Markdown Demo","content":"本博客基于hexo，这篇markdown demo用于记录博文内容中可用的全部格式。帮助自己回忆查询，也作为主题的展示。\nmarkdown配置中，用到的主题和插件有: hexo-theme-aurora, hexo-renderer-markdown-it-plus， hexo-tag-plantuml\n\nAurora主题特有的容器\n插件markdown-it-plus的扩展\n\n行间数学公式\n其他Extra功能\n\n\n基础markdown语法\n\n快捷键\n段落\n表格\n代码块\n字体颜色\n删除线\n数学公式\nUML 图\n图片显示\n\n\n\n\n Aurora主题特有的容器\n\n\n\n\n\n\n提示\nNormal Tips Container\n\n\n\n\n\n\n\n\nCustom header\nCustom header\n\ntips content\ntips new line\n\n\n\n\n\n\n\n\n\n\n注意\nWarning!!!\n\n\n\n\n\n\n\n\n\n特别注意\nDanger!!!\n\n\n\nClick to see more\nFusce rutrum venenatis eros in hendrerit. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nullam eget risus egestas, aliquet ipsum sed, volutpat tortor. Proin finibus tortor ac mauris finibus rutrum. Nullam tincidunt arcu eu urna ullamcorper, eu ultricies turpis ornare. Morbi id sollicitudin orci. Proin lobortis vehicula nibh a ornare. Cras sodales eu ligula quis fermentum. Proin eu ultrices leo, quis iaculis justo. Sed dictum, nulla sit amet imperdiet commodo, libero sapien semper justo, ut lobortis elit nunc vitae ante. Nullam lobortis odio quam, ac condimentum elit posuere vitae. Sed ornare, odio et rutrum varius, lorem eros gravida urna, in pharetra sapien justo non magna.\n\ndetails content\ndetails new line\n\nconsole.log('hello world')\n\n\n\n 插件markdown-it-plus的扩展\nhexo-renderer-markdown-it-plus 支持 KaTeX\\KaTeXKATE​X 语法（类似Latex）\n 行间数学公式\nH=−∑i=1N(σixσi+1x+gσiz)H=-\\sum_{i=1}^N (\\sigma_{i}^x \\sigma_{i+1}^x+g \\sigma_{i}^z)\nH=−i=1∑N​(σix​σi+1x​+gσiz​)\nf(n)={n2,if n is even3n+1,if n is oddf(n) = \\begin{cases}\n \\frac{n}{2},\n &amp; \\text{if } n\\text{ is even}\n \\\\ 3n+1, &amp; \\text{if } n\\text{ is odd}\n \\end{cases}\nf(n)={2n​,3n+1,​if n is evenif n is odd​\n∇×B⃗− 1c ∂E⃗∂t=4πcj⃗∇⋅E⃗=4πρ∇×E⃗ + 1c ∂B⃗∂t=0⃗∇⋅B⃗=0\\begin{aligned}\n\\nabla \\times \\vec{\\mathbf{B}} -\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{E}}}{\\partial t} &amp; = \\frac{4\\pi}{c}\\vec{\\mathbf{j}} \\\\   \n\\nabla \\cdot \\vec{\\mathbf{E}} &amp; = 4 \\pi \\rho \\\\\n\\nabla \\times \\vec{\\mathbf{E}}\\, +\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{B}}}{\\partial t} &amp; = \\vec{\\mathbf{0}} \\\\\n\\nabla \\cdot \\vec{\\mathbf{B}} &amp; = 0 \\end{aligned}\n∇×B−c1​∂t∂E​∇⋅E∇×E+c1​∂t∂B​∇⋅B​=c4π​j​=4πρ=0=0​\n 其他Extra功能\n\n\nH20\n\n\nx2\n\n\ninserted, Delete\n\n\nKaTeX\\KaTeXKATE​X, example xi+yi=zix_i + y_i = z_ixi​+yi​=zi​ and yi+zi=10y_i + z_i = 10yi​+zi​=10\n\n\n​😄 😂 😛\n\n\ntoc&amp;anchor(do not explain this)\n\n\ndeflist（似乎支持不是很好，用markdown正常自然段就行）\n\n点击加载更多\n\nTerm 1\n\nDefinition 1\n\nTerm 2 with inline markup\n\nDefinition 2\n  &#123; some code, part of Definition 2 &#125;\n\nThird paragraph of definition 2.\n\n\n\n\n\n\nabbr（鼠标移上去有提示文字）\n\n\n脚注[1]\n\n\nmark, ==mark==\n\n\n\n 基础markdown语法\n 快捷键\n\n加粗    Ctrl + B\n斜体    Ctrl + I\n引用    Ctrl + Q\n插入链接    Ctrl + L\n插入代码    Ctrl + K\n插入图片    Ctrl + G\n提升标题    Ctrl + H\n有序列表    Ctrl + O\n无序列表    Ctrl + U\n横线    Ctrl + R\n撤销    Ctrl + Z\n重做    Ctrl + Y\n\n 段落\n\n\n\n\n\n\n\n\n\nMarkdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    ——   维基百科 \n使用简单的符号标识不同的标题，将某些文字标记为粗体或者斜体，创建一个 链接 等。\n本编辑器支持 Markdown Extra , 　扩展了很多好用的功能。具体请参考.\n 表格\nMarkdown　Extra　表格语法：\n\n\n\n项目\n价格\n\n\n\n\nComputer\n$1600\n\n\nPhone\n$12\n\n\nPipe\n$1\n\n\n\n可以使用冒号来定义对齐方式：\n\n\n\n项目\n价格\n数量\n\n\n\n\nComputer\n1600 元\n5\n\n\nPhone\n12 元\n12\n\n\nPipe\n1 元\n234\n\n\n\n 代码块\n代码块语法遵循标准markdown代码，例如：\n@requires_authorization\ndef somefunc(param1='', param2=0):\n    '''A docstring'''\n    if param1 > param2: # interesting\n        print 'Greater'\n    return (param2 - param1 + 1) or None\nclass SomeClass:\n    pass\n>>> message = '''interpreter\n... prompt'''\n 字体颜色\nHello (github中看不到颜色)\n 删除线\nHello\n 数学公式\n\n\n行内公式，数学公式为：Γ(n)=(n−1)!∀n∈N\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb NΓ(n)=(n−1)!∀n∈N。\n\n\n块级公式：\nx=−b±b2−4ac2ax = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} \nx=2a−b±b2−4ac​​\n\n\n UML 图\n安装了hexo-tag-plantuml插件，详细用法参考这篇博文\n示例一：\n\n示例二：\n\n 图片显示\n\n\n\n\nfootnote ↩︎\n\n\n\n","slug":"markdown-demo","date":"2021-06-14T03:39:08.000Z","categories_index":"Tech,MyBlog","tags_index":"Markdown,Memorandum,hexo-theme-aurora","author_index":"Gavin"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"使用Hexo来写博客，保留hello world页面作为纪念。\nWelcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\n Quick Start\n Create a new post\n$ hexo new \"My New Post\"\nMore info: Writing\n Run server\n$ hexo server\nMore info: Server\n Generate static files\n$ hexo generate\nMore info: Generating\n Deploy to remote sites\n$ hexo deploy\nMore info: Deployment\n","slug":"hello-world","date":"2021-06-14T03:39:08.000Z","categories_index":"Tech,MyBlog","tags_index":"Hello world,Blog","author_index":"Gavin"},{"id":"b2e8ef9771bf66e4bc1e63fecf6450a9","title":"VScode上写python的技巧","content":"\nvscode对python的支持一直在跟进，目前已经可以直接使用 jupyter, python, pylance 这三个插件做到较好的支持，这篇博客主要介绍了之前的一些安装方式。\n 引子\n因为cs225是基于python讲数据结构和算法的，作业又都是小组作业。于是就需要一个python的多人工作流。\n需要说的是，我们这里只是个人或者小工作量的合作，需要的是快速，便捷，轻量，所以选择vscode。对于更大的工程，pycharm等IDE会是更好用的\n本文默认读者python和jupyter的使用，并对vscode有一定了解，同时能够独立自主的安装所需的插件\n 目录\n\n引子\n目录\n1. vscode相关插件的安装\n\n1.1 python 插件\n1.2 git 相关插件\n1.3 Jupyter client\n\n\n2. python文件概述\n\n2.1 传统的.py文件\n2.2 jupyter的.ipynb文件\n\n\n3. jupyter client对.py文件的支持（重点）\n\n3.1 python code as jupyter cells\n3.2 markdown\n3.3 .py file → .ipynb file\n\n\n4. git支持\n.END\n\n\n 1. vscode相关插件的安装\n 1.1 python 插件\n在vscode插件商店搜索 python ，安装官方（作者为Microsoft）的插件，等待安装完成。如果在wsl工作区工作，则在wsl的插件栏中，点击 install on WSL ，安装完成后重新加载即可。\n2020.7.11 update 这段时间又有一些更新：\n\n\n指定工作区缓存文件夹：\nvscode设置中，将python cache folder path设置为 .vscode/python_cache 并且在工作区的.vscode 文件夹中，新建python_cache文件夹，重启就能用\n这样可以加速换工作区时重新分析（电脑A转移到电脑B，可直接复制工作区并上手）\n\n\n关于长时间下载python language server的解决方法：\n\n在输出面板查看python language server（或者anaconda pack）的输出，找到下载的地址\n使用自己的下载器下载（例如IDM），得到 Python-Language-Server-win-x64.0.5.51.nupkg\n重命名为 .zip 文件后，用解压软件，解压到 C:\\Users\\51284\\.vscode\\extensions\\ms-python.python-2020.6.91350\\languageserver.0.5.51\\ 文件夹中\n重启vscode就能使用\n\n\n\n 1.2 git 相关插件\nvscode自带git的版本管理， add，commit，pull，push 都有图形化界面。但是我强烈推荐在安装一个 Gitlens ，在多人合作中能大大提高git的效率。具体使用后文会提到。\n 1.3 Jupyter client\n后续将会使用到jupyter client的功能，所以要在选用的python解释器环境中安装jupyter库。简单的说就是需要 pip install jupyter 或者用anaconda安装jupyter\n 2. python文件概述\n 2.1 传统的.py文件\nvscode作为主流的文本编辑器，对python文件的支持还是很好的，代码高亮和定义快速查看都有。\n\n按住 ctrl 鼠标单击函数或者类，会跳转到定义的位置。\n按住 ctrl 鼠标悬停在函数或者类上方，会出现定义上下文的小窗，即览即走。\n光标在函数或者类名中，按下 F12 会出现代码行内嵌的小窗，以供预览定义处的上下文。\n\n当然调试的支持也很好。按下 F5 选择 “Python File” 就可以进入ui界面调试。会在出现错误的地方直接停下报错，不会等到把调用栈清空才traceback。\n 2.2 jupyter的.ipynb文件\n在vscode 1.4.x 版本（可能记错）中，增减了对jupyter的支持。其一是支持调用jupyter终端打开.ipynb文件。但有一说一，这个功能相当辣鸡🐔。很多jupyter notebook有的功能他都没。罪状系数如下：\n\n不能保持多个cell的编辑状态，写markdown的cell简直逼疯人\n不能复制cell\n经常莫名其妙的跳到最后一个cell\n\n不过好在vscode天下第一文本编辑器不是吹的，.ipynb文件支持不好，但是jupyter client对.py文件的支持完美的填补了这个漏洞。\n 3. jupyter client对.py文件的支持（重点）\n\n\n\n\n\n\n\n\n\n这是vscode对python爱的体现，是最神仙的功能没有之一。\n1.4.x版本中，另一个更新获得了我如上评价。为什么这么说呢？因为vscode通过这个功能，让普通的.py文件，能够像jupyter文件一样分块运行，而且支持markdown语法。具体实现如下：\n 3.1 python code as jupyter cells\n\n在普通的.py文件中，vscode增加了标识符 #%% 。当文件中出现 #%%， 就把其后至下一个 #%% 中的代码视为一个cell里的内容。同时因为是 # 开头，.py文件正常运行会当作注释忽略。\n在每个 #%% 上方会出现三个选项 Run Cell | Run Above | Debug Cell 单击任一能实现和jupyter notebook 一样的效果。Run Cell时，界面右边会出现jupyter的终端，代码就可以分步执行。\n在设置中（快捷键 ctrl + , ），搜索 python enter ，将 ”Python › Data Science: Send Selection To Interactive Window“ 打上勾后，可以在.py文件中通过按 shift + enter 来执行 Run Cell ，更加快捷。\n这里debug功能虽然可以逐步进入，但是报错要在全部运行之后才能出现（不是在error产生的地方）所以如果有error出现，还是建议用 F5 来调试。\n右边的jupyter终端支持jupyter notebook的功能，在最上的图标功能栏中，依次是：清除所有输出（保存当前变量），重做，撤销，强制停止当前cell，重启jupyter终端（清除所有变量），查看内部变量，当前输出导出为.ipynb文件，展开所有cell。【加黑这几个功能真是爱了爱了】\n\n 3.2 markdown\n\n同时如果在 #%% 后加 [markdown] 即 #%% [markdown] ，vscode将把这个cell是为markdown cell，其中支持所有markdown语法。需要注意的是，这些markdown内容需要在开头加上额外的 # ，这样才能不被当作是python代码误执行。\n\n 3.3 .py file → .ipynb file\n\nvscode除了能够在右边的jupyter client导出为ipynb之外，也可以直接导出：资源管理器，编辑窗口空白处， ctrl+shift+p 调出的命令行都可以找到export as Jupyter Notebook的选项。\n\n\n.py文件在jupyter终端的工作区快照\n\n 4. git支持\n\n\n\n\n\n\n\n\n\n你问我支持不支持啊，那我一定是支持的！——他\n先占个坑，Gitlens也是神仙插件，具体使用直接看插件页面说明。后期有空填坑\n .END\n","slug":"vscode-python","date":"2020-05-04T13:24:03.000Z","categories_index":"Tech,vscode,python,jupyter","tags_index":"vscode,python,jupyter","author_index":"Gavin"},{"id":"bcb190831e5d67086d3758fcbd5f11b9","title":"manim的安装","content":"\nmanim是3B1B用来做演示视频的python库，涉及到代码控坐标系、图形、文字等。同时有一些进阶的内容，用于控制视频、音乐等。实例可见这个视频。\n 目录\n\n目录\nmanim安装的踩坑\n\n首先是python相关的安装\n然后是其他的依赖安装\n尝试跑一下example\n最后是一些出现的问题的记录\n\n\n\n\n manim安装的踩坑\n按道理说，跟着网上的教程来一步一步走是不会出问题的。但是我电脑内存快不够了，同时又想把manim装在WSL里，于是踩下了好多的坑。这里总结一下：\n 首先是python相关的安装\n\n用conda创建环境是可以的，这样可以一个系统多个版本。我用miniconda新建了环境，python版本3.7。这个环境中安装python依赖库还是推荐 pip git下来的 requirements.txt ，虽然conda里面用pip废一点点空间，但是真的方便很多，不用走弯路。\n总体来说就是conda建完环境之后跟着manim的 readme.md 来就行了。嫌速度慢可以换成清华源\n\nconda create -n manim python=3.7 #-n 表示环境的名称\nconda activate manim\ncd \"the path of your project\"\ngit clone https://github.com/3b1b/manim.git\ncd manim\npip3 install manimlib\npython3 -m pip install -r requirements.txt\n 然后是其他的依赖安装\n\n\nsox 和ffmpeg应该没有问题，直接apt就行。cairo也是apt，命令上官网搜。但是tex出了问题。因为有两个win和wsl两个相对独立的环境，两边都装texlive硬盘容量吃不消，于是想压榨空间。但是很不巧，失败了。\n\n一开始为了省空间在wsl安装了 miktex，花了一点时间，但是相关的tex编辑器是可以用的（vscode的远程tex）。所以我就以为装好了。但是结果运行manim的时候出错了，报错信息如下。具体原因在svg_modules中，似乎是svg文件生成出错了。试了很多方法之后，发现问题出在miktex缺少一些tex组件。把miktex卸载了，重新装 texlive-full 就行了。\n嫌速度慢可以换成阿里源\n\n  sudo apt install sox ffmpeg texlive-full libcairo2-dev\n\n\n 尝试跑一下example\npython3 ./manim.py example_scenes.py OpeningManimExample-pl\npython3 ./manim.py example_scenes.py SquareToCircle -pl\npython3 ./manim.py example_scenes.py WarpSquare -pl\npython3 ./manim.py example_scenes.py WriteStuff -pl\npython3 ./manim.py example_scenes.py UpdatersExample -pl\n 最后是一些出现的问题的记录\n\n运行了example，发现SquareToCircle这样不涉及文字的可以正常运行，但是有文字组件的（TexMobjct）编译不能通过。会报错 UserWarning: g0-84 not recognized ，并回溯到 break_up_by_substrings 函数出现list index out of range。原因是生成的svg的元素没有正确读入svgMobject中，导致尝试索引一个空list。\n\n解决方法是：卸载了miktex，安装texlive-full（texlive不行）。\n\n\n\n","slug":"install-manim","date":"2020-02-22T12:56:15.000Z","categories_index":"Tech,manim","tags_index":"manim","author_index":"Gavin"},{"id":"fb60864ba6c70d12dc9f40aaad0945f8","title":"在wsl上写mp的辛酸血泪史","content":"\n大一学习ECE120时用vscode写C程 (课程的mp, machine problem) 的工作流，做了简单的记录。主要包括自动编译调试脚本，valgrind调试输出。以及在不同虚拟机平台调试C程的方法。因为是仅针对课程内容的环境调试，内容比较个性化，适合初学者使用，也能更加熟悉vscode的运行逻辑。但是针对较大的项目建议使用cmake和clion等成熟框架IDE。\n 引子：我为啥又折腾了\n\n\n\n\n\n\n\n\n\n学校给的垃圾虚拟机真的太蛋疼了，没有root权限，不能装软件，还是32位的，ssh全程调试都不行。老老实实的做得要全用gdb来debug，都9102年了，纯命令行debug，您是人🐎？作为一个被vscode宠坏的人，没有ui界面是不行的。所以。。。又折腾了。。。\n这个流程看起来有点复杂，其实花点时间搞清vscode的逻辑后就很清晰了。只是把原来要一遍一遍输入的命令组合调用。而且一旦熟练了可以省下更多的时间。\n\n\n\n\n\n\n\n注意\n大工程还是老老实实用ide，不然会死🐴\n\n\n 目录\n\n引子：我为啥又折腾了\n目录\n0. 总览\n1. 总结出来的流程\n2. vscode的配置文件\n\ntasks文件\nlaunch文件\n\n\n3. 细数踩过的坑\n\narchlinux（官方ECE220虚拟机）\nubuntu\nwsl\n\n\n.END\n\n\n 0. 总览\n\n在vscode上写c/cpp的细致教程参考这一篇：VSCode 如何编写运行 C、C++ 程序？ - 知乎\n 1. 总结出来的流程\n\n配置 ‘Makefile’ 复制一遍, 把 “main” 变成自己的mymain\n配置自己的mymain.c, 一般来说直接复制main, 把里面不能编译的 i386 代码删除, 把不测试的部分先注释掉, 写好一部分测试一部分\n配置tasks.json，用到valgrind的, 把(mpX) valgrind leak check配置了\n配置launch.json, 每个mp新建一个launch, 复制前一个, 改掉program和args\n开始写代码\n\n保证内存管理\n\n先把load和free写了, 直接测试tasks里的(mpX) valgrind\n会生成一个.valgrind文件, 打开这个文件, 有高亮支持（需要vscode插件支持）\n看这个文件, 也可以用F5, 保证内存控制正确\n\n\n测试功能\n\n正常写就行了\n不用单步调试的话, 直接用valgrind, 可以看输出\nF5进单步调试慢慢看\n\n\n代码注意点:\n\n记得写注释\n低耦合, 分离模块\n\n\n\n\n功能完善之后, 可以写测试文件\n\n有gold的可以用test.sh\ntest.sh放进Makefile\n\n\n功能全部完成后, valgrind最后再检查一次内存\nsvn上传, 虚拟机里最终检查\n最后检查注释, 上传\n\n 2. vscode的配置文件\n tasks文件\ntask文件简单来说就是你要在命令行执行的命令。除了传统的gcc编译命令之外，也可以调用make命令。这里的作用是在进入调试（launch）之前，先把保存好的文件编译一遍，保证测试的是当前修改完的代码。调用方式是 ctrl+ B\n\n下面注释解释了三个功能块：基本功能（gcc为例），组合功能（clean and make为例），valgrind功能（valgrind在vscode中没有很好的集成，不像clion方便，但是通过这里的task和插件 vscode-valgrind 做到valgrind显示结果且高亮）\n&#123;\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n//////////////////////////////////////\n\t\t\t\t//示例： 把gcc filename.c -o filename -g -Wall 变成tasks格式\n        &#123;\"label\": \"g++ build active file\",//名字：在后面的launch中用到，意思是执行launch命令之前，先跑一遍这个task命令\n            \"type\": \"shell\",\n            \"command\": \"/usr/bin/g++\",    //要用的程序，gcc，make和其他的都可以，只要terminal能能用他就能用\n            \"args\": [                     //传入的参数\n                \"$&#123;file&#125;\",\n                \"-o\",\n                \"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;\",\n                \"-g\",\n                \"-Wall\"\n            ],\n            \"options\": &#123;\n                \"cwd\": \"$&#123;fileDirname&#125;\"\n            &#125;,\n            \"problemMatcher\": [\n                \"$gcc\"\n            ],\n            \"group\": \"build\"               //最好选\"build\"这样在都在一起方便看\n        &#125;,\n//////////////////////////////////////\n        &#123;\"label\": \"gcc build active file\",\n            \"type\": \"shell\",\n            \"command\": \"/usr/bin/gcc\",\n            \"args\": [\n                \"$&#123;file&#125;\",\n                \"-o\",\n                \"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;\",\n                \"-g\",\n                \"-Wall\"\n            ],\n            \"options\": &#123;\n                \"cwd\": \"$&#123;fileDirname&#125;\"\n            &#125;,\n            \"problemMatcher\": [\n                \"$gcc\"\n            ],\n            \"group\": \"build\"\n        &#125;,\n        &#123;\"label\": \"make\",\n            \"type\": \"shell\",\n            \"command\": \"/usr/bin/make\",\n            \"options\": &#123;\n                \"cwd\": \"$&#123;fileDirname&#125;\"\n            &#125;,\n            \"group\": \"build\",\n            \"problemMatcher\": [\n                \"$gcc\"\n            ]\n        &#125;,\n        &#123;\"label\": \"make_clean\",\n            \"type\": \"shell\",\n            \"command\": \"/usr/bin/make\",\n            \"args\": [\n                \"clean\"\n            ],\n            \"options\": &#123;\n                \"cwd\": \"$&#123;fileDirname&#125;\"\n            &#125;,\n            \"group\": \"build\"\n        &#125;,\n//////////////////////////////////////\n        &#123;\"label\": \"clean and make\",   //意思是把上面两个tasks连在一起，按照顺序用（也可以并行“parallel”）\n            \"dependsOn\":[\"make_clean\",\"make\"],\n            \"dependsOrder\": \"sequence\",\n            \"problemMatcher\":[]\n        &#125;,\n//////////////////////////////////////\n        &#123;\"label\": \"valgrind start gdbserver\",//这个是错误示例，不要用！vscode的gdb调试似乎不支持gdb的server\n            \"type\": \"shell\",\n            \"command\": \"/usr/bin/valgrind\",\n            \"args\": [\n                \"--tool=memcheck\",\n                \"--vgdb=yes\",\n                \"--vgdb-error=0\",\n                \"--leak-check=full\",\n                \"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;\"\n            ],\n            \"options\": &#123;\n                \"cwd\": \"$&#123;fileDirname&#125;\"\n            &#125;\n        &#125;,\n//////////////////////////////////////\n        &#123;\"label\": \"(mpX) valgrind leak check\", // 针对mp的valgrind命令\n            \"type\": \"shell\",\n            \"command\": \"/usr/bin/valgrind\",\n            \"args\": [\n                \"--tool=memcheck\",\n                \"--leak-check=full\",\n                \"--track-origins=yes\",\n                \"$&#123;fileDirname&#125;/mp11\",//TODO: change the number here \n                \"graph\",              //TODO:这里相当于测试时给mp11传入的参数，要修改为对应mp的   \n                \"requests\",\n                \">\",                  //后面三行让valgrind的输出写入名为mp11.valgrind的文件，在另一个窗口打开这个文件就能看到高亮的输出了，见前文图右上角\n                \"$&#123;fileDirname&#125;/mp11.valgrind\",//TODO: change the number here \n                \"2>&amp;1\",\n            ],\n            \"options\": &#123;\n                \"cwd\": \"$&#123;fileDirname&#125;\"\n            &#125;,\n            \"problemMatcher\":[],\n            \"group\": \"build\",\n        &#125;,\n        &#123;\"label\": \"valgrind leak check\", //对任意文件的valgrind命令\n            \"type\": \"shell\",\n            \"command\": \"/usr/bin/valgrind\",\n            \"args\": [\n                \"--tool=memcheck\",\n                \"--leak-check=full\",\n                \"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;\",\n                \"2>&amp;1\",\n                \"&amp;\"\n            ],\n            \"options\": &#123;\n                \"cwd\": \"$&#123;fileDirname&#125;\"\n            &#125;,\n            \"group\": \"build\",\n        &#125;,\n        &#123;\"label\": \"valgrind\",//gcc和valgrind组合\n            \"dependsOrder\": \"sequence\",\n            \"dependsOn\": [\n                \"gcc build active file\",\n                \"valgrind leak check\"\n            ],\n            \"group\": \"build\"\n        &#125;,\n        &#123;\"label\": \"(mpX) make and valgrind\",//make和valgrind组合\n            \"dependsOrder\": \"sequence\",\n            \"dependsOn\": [\n                \"make\",\n                \"(mpX) valgrind leak check\"\n            ],\n            \"group\": \"build\",\n            \"problemMatcher\":[]\n        &#125;,\n//////////////////////////////////////\n        &#123;\"label\": \"lc3as assemble\", //lc3的一些命令，用不到的可以删了\n            \"type\": \"shell\",\n            \"command\": \"/home/gavin/bin/lc3as\",\n            \"args\": [\n                \"$&#123;file&#125;\"\n            ],\n            \"options\": &#123;\n                \"cwd\": \"$&#123;fileDirname&#125;\"\n            &#125;,\n            \"presentation\": &#123;\n                \"echo\": true,\n                \"reveal\": \"always\",\n                \"focus\": false,\n                \"panel\": \"shared\",\n                \"showReuseMessage\": true,\n                \"clear\": false\n            &#125;,\n            \"group\": \"build\",\n            \"problemMatcher\": []\n        &#125;,\n        &#123;\"label\": \"lc3sim-tk simulate\",\n            \"type\": \"shell\",\n            \"command\": \"DISPLAY=:0\",\n            \"args\": [\n                \"/home/gavin/bin/lc3sim-tk\",\n                \"$&#123;fileBasenameNoExtension&#125;.obj\"\n            ],\n            \"options\": &#123;\n                \"cwd\": \"$&#123;fileDirname&#125;\"\n            &#125;,\n            \"presentation\": &#123;\n                \"echo\": false,\n                \"reveal\": \"never\"\n            &#125;\n        &#125;,\n        &#123;\"label\": \"lc3sim simulate\",\n            \"type\": \"shell\",\n            \"command\": \"/home/gavin/bin/lc3sim\",\n            \"args\": [\n                \"$&#123;fileBasenameNoExtension&#125;.obj\"\n            ],\n            \"options\": &#123;\n                \"cwd\": \"$&#123;fileDirname&#125;\"\n            &#125;\n        &#125;,\n        &#123;\"label\": \"lc3 tk debug\",\n            \"type\": \"shell\",\n            \"dependsOrder\": \"sequence\",\n            \"dependsOn\": [\n                \"lc3as assemble\",\n                \"lc3sim-tk simulate\"\n            ],\n            \"problemMatcher\": [],\n            \"group\": \"build\"\n        &#125;,\n        &#123;\"label\": \"lc3 CLI debug\",\n            \"type\": \"shell\",\n            \"dependsOrder\": \"sequence\",\n            \"dependsOn\": [\n                \"lc3as assemble\",\n                \"lc3sim simulate\"\n            ],\n            \"problemMatcher\": []\n        &#125;\n    ]\n&#125;\n\n\n launch文件\n\nlaunch简单来说就是gdb时给的命令。基本就是一个mp建一个新的，mp小工程没必要用cmake，但好处在于按F5能进入gui调试界面，友好许多。\n//launch 文件示例，每个mp都不一样，具体按照要求来\n//看mp11大概指导怎么写就行了，别的mp的基本都是重复\n&#123;\n    // 使用 IntelliSense 了解相关属性。 \n    // 悬停以查看现有属性的描述。\n    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        &#123;\n//////////////////////////////////////\n\t\t\t\t\t\t//示例：原本输入命令为./mp11 graph request如何变成launch的形式\n            \"name\": \"mp11\",                   //debug栏中显示的名称\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"program\": \"$&#123;fileDirname&#125;/mp11\", //TODO:要运行的文件\n            \"args\": [                         //文件名后传入的参数，根据mp要求文档来\n                \"graph\", \n                \"requests\",\n                //\"mygraph\", \n                //\"myrequests\",\n            ],\n            \"stopAtEntry\": false,             //开始调试时在文件起点暂停与否\n            \"cwd\": \"$&#123;fileDirname&#125;\",          //调试时的目录，查找data文件确定相对路径\n            \"environment\": [],                //一般不用填\n            \"externalConsole\": false,\n            \"MIMode\": \"gdb\",\n            \"setupCommands\": [\n                &#123;\n                    \"description\": \"Enable pretty-printing for gdb\",\n                    \"text\": \"-enable-pretty-printing\",\n                    \"ignoreFailures\": true\n                &#125;\n            ],\n            \"preLaunchTask\": \"clean and make\", //这个很重要，要在tasks.json中编辑\n            \"miDebuggerPath\": \"/usr/bin/gdb\"\n        &#125;,\n//////////////////////////////////////\n        &#123;\n            \"name\": \"mp10\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"program\": \"$&#123;fileDirname&#125;/mp10\", //TODO:change this within test/mpX\n            \"args\": [\n                // \"tests/maze3.txt\" //TODO:change this within test/\n            ],\n            \"stopAtEntry\": false,\n            \"cwd\": \"$&#123;fileDirname&#125;\",\n            \"environment\": [],\n            \"externalConsole\": false,\n            \"MIMode\": \"gdb\",\n            \"setupCommands\": [\n                &#123;\n                    \"description\": \"Enable pretty-printing for gdb\",\n                    \"text\": \"-enable-pretty-printing\",\n                    \"ignoreFailures\": true\n                &#125;\n            ],\n            \"preLaunchTask\": \"clean and make\",\n            \"miDebuggerPath\": \"/usr/bin/gdb\"\n        &#125;,\n        &#123;\n            \"name\": \"mp9\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"program\": \"$&#123;fileDirname&#125;/mp9\", //TODO:change this within test/mpX\n            \"args\": [\n                \"tests/maze3.txt\" //TODO:change this within test/\n            ],\n            \"stopAtEntry\": false,\n            \"cwd\": \"$&#123;fileDirname&#125;\",\n            \"environment\": [],\n            \"externalConsole\": false,\n            \"MIMode\": \"gdb\",\n            \"setupCommands\": [\n                &#123;\n                    \"description\": \"Enable pretty-printing for gdb\",\n                    \"text\": \"-enable-pretty-printing\",\n                    \"ignoreFailures\": true\n                &#125;\n            ],\n            \"preLaunchTask\": \"clean and make\",\n            \"miDebuggerPath\": \"/usr/bin/gdb\"\n        &#125;,\n        &#123;\n            \"name\": \"mp8\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"program\": \"$&#123;fileDirname&#125;/mp8\", //TODO:change this within test/mpX\n            \"args\": [\n                \"sudoku1.txt\"\n            ],\n            \"stopAtEntry\": false,\n            \"cwd\": \"$&#123;fileDirname&#125;\",\n            \"environment\": [],\n            \"externalConsole\": false,\n            \"MIMode\": \"gdb\",\n            \"setupCommands\": [\n                &#123;\n                    \"description\": \"Enable pretty-printing for gdb\",\n                    \"text\": \"-enable-pretty-printing\",\n                    \"ignoreFailures\": true\n                &#125;\n            ],\n            \"preLaunchTask\": \"clean and make\",\n            \"miDebuggerPath\": \"/usr/bin/gdb\"\n        &#125;,\n        &#123;\n            \"name\": \"mp7\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"program\": \"$&#123;fileDirname&#125;/mp7\", //TODO:change this within test/mpX\n            \"args\": [\n                \"/home/gavin/2019_FALL/ece220fa19/mp7/Images/tajmahal.png\",\n                \"/home/gavin/2019_FALL/ece220fa19/mp7/Images/my_tajmahal.png\",\n                \"0\",\n            ],\n            \"stopAtEntry\": false,\n            \"cwd\": \"$&#123;fileDirname&#125;\",\n            \"environment\": [],\n            \"externalConsole\": false,\n            \"MIMode\": \"gdb\",\n            \"setupCommands\": [\n                &#123;\n                    \"description\": \"Enable pretty-printing for gdb\",\n                    \"text\": \"-enable-pretty-printing\",\n                    \"ignoreFailures\": true\n                &#125;\n            ],\n            \"preLaunchTask\": \"clean and make\",\n            \"miDebuggerPath\": \"/usr/bin/gdb\"\n        &#125;,\n        &#123;\n            \"name\": \"mp6\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"program\": \"$&#123;fileDirname&#125;/gameoflife\",\n            \"args\": [\n                \"&lt;\",\n                \"life4.dat\"\n            ],\n            \"stopAtEntry\": true,\n            \"cwd\": \"$&#123;fileDirname&#125;\",\n            \"environment\": [],\n            \"externalConsole\": false,\n            \"MIMode\": \"gdb\",\n            \"setupCommands\": [\n                &#123;\n                    \"description\": \"Enable pretty-printing for gdb\",\n                    \"text\": \"-enable-pretty-printing\",\n                    \"ignoreFailures\": true\n                &#125;\n            ],\n            \"preLaunchTask\": \"make_ignore_warning\",\n            \"miDebuggerPath\": \"/usr/bin/gdb\"\n        &#125;,\n\n        &#123;\"name\": \"g++ build and debug active file\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"program\": \"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;\",\n            // \"args\": [\"$&#123;fileDirname&#125;/testfour.txt\"],\n            \"stopAtEntry\": false,\n            \"cwd\": \"$&#123;fileDirname&#125;\",\n            \"environment\": [],\n            \"externalConsole\": false,\n            \"MIMode\": \"gdb\",\n            \"setupCommands\": [\n                &#123;\n                    \"description\": \"Enable pretty-printing for gdb\",\n                    \"text\": \"-enable-pretty-printing\",\n                    \"ignoreFailures\": true\n                &#125;\n            ],\n            \"preLaunchTask\": \"g++ build active file\",\n            \"miDebuggerPath\": \"/usr/bin/gdb\"\n        &#125;,\n        &#123;\"name\": \"gcc build and debug active file\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"program\": \"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;\",\n            \"stopAtEntry\": false,\n            \"cwd\": \"$&#123;fileDirname&#125;\",\n            \"environment\": [],\n            \"externalConsole\": false,\n            \"MIMode\": \"gdb\",\n            \"setupCommands\": [\n                &#123;\n                    \"description\": \"Enable pretty-printing for gdb\",\n                    \"text\": \"-enable-pretty-printing\",\n                    \"ignoreFailures\": true\n                &#125;\n            ],\n            \"preLaunchTask\": \"gcc build active file\",\n            \"miDebuggerPath\": \"/usr/bin/gdb\"\n        &#125;,\n        &#123;\"name\": \"cppdbg launch\", //官方示例\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"program\": \"enter program name, for example $&#123;workspaceFolder&#125;/a.out\",\n            \"args\": [],\n            \"stopAtEntry\": false,\n            \"cwd\": \"$&#123;workspaceFolder&#125;\",\n            \"environment\": [],\n            \"externalConsole\": false,\n            \"pipeTransport\": &#123;\n                \"debuggerPath\": \"/usr/bin/gdb\",\n                \"pipeProgram\": \"/usr/bin/ssh\",\n                \"pipeArgs\": [],\n                \"pipeCwd\": \"\"\n            &#125;,\n            \"MIMode\": \"gdb\",\n            \"setupCommands\": [\n                &#123;\n                    \"description\": \"Enable pretty-printing for gdb\",\n                    \"text\": \"-enable-pretty-printing\",\n                    \"ignoreFailures\": true\n                &#125;\n            ]\n        &#125;, \n    ]\n&#125;\n\n\n 3. 细数踩过的坑\n archlinux（官方ECE220虚拟机）\n\n用ssh连接vscode\n\n没有openssh-server\n\n\n尝试获得root权限\n\n不可能的，要用来考试的机子不会放权限的\n\n\n安装vscode\n\nroot没有不能用pacman\n直接build没有找到，可能可以，但是既然他要用来考试，一般是找不到了\n\n\n\n ubuntu\n\n\n✔快乐32位虚拟机\n\n还是向oracle VM屈服了，装了32位的16.04\n但是笔记本性能真的不太好，内存显存cpu给足了感觉还是卡\n好就好在32位的程序能跑\n为啥用vm就能装32位的呢？？？\n\n\n\n尝试ssh连接vscode\n\n不支持32位的ssh server\n研究了一下下虚拟机的网络连接模式，小有收获\n\n\n\n✔安装vscode\n\n直接用apt装成功了\n也可以直接编译32位的文件，但是如果有错误【指针指向\\0或者别的】会直接爆掉，虚拟机直接异常关闭。de一次bug就要重启\n界面不太流畅，经常有闪烁的黑框，而且32位的vscode在1.35之后就不更新了\n\n目前找到的最好的解决方案，如果不出奇怪错误的话\n\n\n wsl\n\n✔64位编译32程序\n\n缺少multilib库\nmakefile编译指令 -m32 -m64\n最后还是要去32位的机器上跑test，就是写起来比较流畅\n\n\ndocker玩交叉开火\n\n还没玩，说不定是新世界\n\n\n\n .END\n","slug":"vscode-wsl-c","date":"2019-11-07T10:06:11.000Z","categories_index":"Tech,vscode,wsl,ECE,C","tags_index":"vscode,wsl,C","author_index":"Gavin"},{"id":"45776bacd401b75a0e1f5aec9fc2e9bc","title":"WSL+VScode配置lc3汇编语言环境","content":"\n\n\n\n\n\n\n\n\n\n针对UIUC课程ECE120配置的lc3调试环境。lc3是一个简易的16位计算机模型，用于计算机CPU运行逻辑的学习，详细可见Introduction to Computing System。主要用到了 Win10的WSL+VScode 搭建调式环境。并且涉及了linux中lc3汇编器的安装。最终还做到了wsl的图形化界面以窗口形式在windows中显示。（现在wsl进化了许多，有些方法已经过时）。\n这是我严格意义上的第一篇博客，写的不太成熟，杂糅了很多内容。可以看目录直接跳转。\n\n0. 引子：为什么要配置wsl上的lc3环境？\n\n0.1 看不惯学校给的vm\n0.2 wsl上写lc3的利弊\n\n👍利/advantage\n👎弊/disadvantage\n\n\n\n\n1. 安装windows的linux子系统（WSL）\n\n1.1 从零开始安装wsl\n1.2 wsl的一些使用技巧\n\n\n2. 安装vscode和插件\n\n2.1 安装vscode\n2.2 安装插件\n\n\n3. 安装lc3编译器\n\n3.1 更换镜像源\n3.2 安装组件\n3.3 安装lc3编译器\n\n\n4. 在vscode上远程打开WSL\n\n4.1 现在尝试用vscode连接wsl\n4.2 一些操作细节\n\n\n5. 在vscode上写lc3汇编语言\n6. 在vscode上调试lc3程序【重点】❗\n\n6.1 lc3的编译过程\n6.2 用tasks化简调试过程\n6.3 调试的注意事项\n\n\n7. 通过vscode可视化调试lc3程序【重点】❗❗\n\n7.1 win10子系统的图形化界面\n7.2 用vscode启动图形化调试界面\n\n\n.END\n\n\n 0. 引子：为什么要配置wsl上的lc3环境？\n 0.1 看不惯学校给的vm\n我是计算机系的，上ECE课的时候用到了《计算机系统概论》这本书。有关于lc3汇编语言的作业。\n老师建议用学校封装好的linux，放在vm上跑，但我感觉vm太慢而且操作不友好。笔记本也因为内存不够的问题总是卡死，文件交互也不方便，不能直接复制帮别人检查文件。好在windows出了linux子系统（wsl），想着自己配置一个wsl的lc3环境，能省不少事。\n因为之前就已经在用Ubuntu子系统学linux的操作了，索性就搜了资料配置了一个环境出来。现在配置的差不多了，但是课也快上完了。算是总结一下经验，为学弟学妹们排雷了。\n 0.2 wsl上写lc3的利弊\n 👍利/advantage\n\n可以用vscode或别的win端的编辑器敲代码，**代码高亮，快速文本编辑，**代码书写体验极佳。\n文件交互方便，通过资源管理器直接访问wsl文件系统，复制粘贴一键搞定\nvscode还能配置调试任务（tasks）\n一键调试代码，配置一劳永逸\n不用费脑子折腾万恶的vm\n\n 👎弊/disadvantage\n\n需要一定的linux使用基础\n配置环境需要小折腾\n可能会有莫名的bug🐛\nwin和linux文件系统不兼容，不注意会有换行符的问题（都用vscode就没事，见后文）\n\n因为我也是从小白开始学起，很多都是参考别人的博客和教程，所以这里就不重复造轮子了，一些配置步骤就直接引用（转载）别人的文章了。\n我的配置：\n系统：win10 1903\n电脑：surface pro（第五代）\n\nmac本身就是Unix，用terminal就行\nwin7因为没有Linux子系统，所以不适用本文方法，乖乖用vm跑。或者升级成win10\n\n 1. 安装windows的linux子系统（WSL）\n 1.1 从零开始安装wsl\n\n快捷键 win + i 打开系统设置，更新win10到最新版本\nwin键 打开开始菜单，键盘直接输入 功能 会出现搜索界面，点击 启用或关闭windows功能\n在弹出来的窗口的最下方，将 适用于Linux的windows子系统 打勾\n在应用商店中搜索linux，会跳出来很多可选的子系统。随个人喜好选择，我用的是 Ubuntu18.04\n等待子系统安装好之后，打开应用，第一次初始化会挺久的，大概五分钟。\n初始化期间不要关掉窗口 ，不然会有奇奇怪怪的问题。初始化完了会让你输入用户名和密码，确认之后就可以正常使用了。\n现在wsl就装好了，这是一个区别与win系统的相对独立的操作系统。目前只有命令行界面，但之后会讲到图形界面。可以输入 mkdir test 来创建一个名为test的文件夹，也可以输入 uname -a 来查看系统信息。（linux的命令行操作可以上网自己学。）\n\n\nCSDN详细的图文教程，但我觉得我说的挺清楚\n 1.2 wsl的一些使用技巧\n\nwsl的目录可以在win的资源管理器下直接访问，路径一般是 C:\\Users\\YOUR_USERNAME\\AppData\\Local\\Packages\\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\\LocalState\\rootfs 可以直接从里面复制文件出来。但是把外面的文件复制进去会不能识别，最好在命令行中用cp命令（因为文件系统不同，linux不能识别win的文件）\nwsl命令行也可以通过在cmd或者powershell中输入 bash 来开启\n\n 2. 安装vscode和插件\n 2.1 安装vscode\n进入vscode官网，下载最新版本的vscode，安装\n 2.2 安装插件\n\n打开vscode，左边栏第5个点进去\n在最上方搜索栏输入 Chinese  安装搜索结果中的第一个，作者为Mircosoft的插件。\n在最上方搜索栏输入 remote - WSL 安装搜索结果中的第一个，作者为Mircosoft的插件。\n在最上方搜索栏输入 LC3 Assembly 安装搜索结果中作者为PaperFanz的插件。\n\n\n\n 3. 安装lc3编译器\n 3.1 更换镜像源\n因为wsl的ubuntu发行版真的太干净了，很多正常发行版有的软件他都没有，所以需要手动把编译lc3编译器的工具装上。鉴于国内访问外往速度感人，我们先把镜像源换成阿里云镜像。\n熟悉linux操作的直接进入/etc/apt/文件夹，把当前source.list备份成source.list.backup，再用vim或nano将下面的内容覆盖原文件\n看不懂上面一句的，打开资源管理器，进入C:\\Users\\YOUR_USERNAME\\AppData\\Local\\Packages\\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\\LocalState\\rootfs\\etc\\apt （用你的用户名代替YOUR_USERNAME）用vscode打开 source.list 文件，注释当前全部内容（ ctrl + A , ctrl + /），再把下面的内容复制进去，保存。\n# 阿里源\ndeb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse\n\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse\n\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse\n\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse\n\ndeb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse\n进入命令行，输入下面这行命令就能更新镜像源，获得速度加成了。\nsudo apt-get update\n 3.2 安装组件\nlinux安装软件很方便，只需要一行命令，这里我们安装wish gcc flex unzip wget这5个软件。打开命令行，输入\nsudo apt-get install wish gcc flex unzip wget\n输入密码再确认就可以了。\n亲测换成阿里源速度基本是原来的10倍（网好的话可能是100倍）。\n 3.3 安装lc3编译器\n具体安装就参照这一篇文章\n吧，写的很详细\n补充一下：\n\n强烈建议查看📑官网的说明文档，有详细的使用说明，可以解决很多问题\n下载及解压两个源文件可以用以下命令\n\n# 下载lc3仿真器及编译工具\nwget http://highered.mheducation.com/sites/dl/free/0072467509/104652/lc3tools_v12.zip\n# 下载c语言转lc3汇编语言转换器工具\nwget http://highered.mheducation.com/sites/dl/free/0072467509/104652/lcc.zip\n# 解压压缩包\nunzip lc3tools_v12.zip\nunzip lcc.zip\n 4. 在vscode上远程打开WSL\n 4.1 现在尝试用vscode连接wsl\n\n打开vscode，如果你已经安装了 remote - WSL 的话，左下角会有 &gt;&lt; 符号，点击后在下拉栏选择 New Windows\n在弹出的新窗口中：打开vscode资源管理器（左侧栏第一个）→ 打开文件夹 → 在下拉栏中选择你要用来存放lc3相关文件的文件夹。成功打开之后，所有操作基本与编辑windows系统下的文件相同。\n\n\n\n 4.2 一些操作细节\n\n文件的复制、移动、删除等操作可以子啊左侧资源管理器里，通过拖拽完成。delete是 永久删除 不能恢复。在windows资源管理器中（C:\\Users\\YOUR_USERNAME\\AppData\\Local\\Packages\\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\\LocalState\\rootfs）复制移动后，可能在wsl中不能识别而没有显示。\nlinux系统和windows系统的 换行符 不同。简单来说就是\n\n对linux系统的文件，右下角一排中选择 LF\n对windows系统的文件，右下角一排中用 CRLF\n\n\n\n 5. 在vscode上写lc3汇编语言\n\n在远程wsl模式下的vscode中，打开 扩展（左侧栏四个小方形那个），把之前安装的三个插件 install in WSL\n打开vscode资源管理器，新建一个文件test.asm，注意以.asm扩展名结尾。\n打开这个文件，就能快乐的用vscode写lc3了。从此多行复制，代码片段，语法高亮，TODO tree都有了，而且启动嗖嗖的快，颜值唰唰滴高。vm有生灵倒悬之急，岂不美哉？\n\n\n 6. 在vscode上调试lc3程序【重点】❗\n 6.1 lc3的编译过程\n想要调试lc3，首先要知道他是怎么工作的。这也是学习lc3的一部分。\n你写的汇编伪代码会经过两轮pass，生成.sym和.obj文件。.obj文件（也就是机器码）再被lc3sim仿真器读取，由仿真器来模拟lc3执行代码的过程。\n因此，一般而言，调试lc3汇编代码需要两行命令， lc3as test.asm 和 lc3sim test.obj 有时候需要打印输出还要 lc3sim -s testcommand &gt; myoutfile 等等。可是这些重复的输入能不能简单一点呢？\n当然可以，这里就用到了vscode的“tasks”功能，把重复的工作化简。\n 6.2 用tasks化简调试过程\n你可以把vscode的tasks看作是一键执行预定脚本的功能。把调试命令设置好后，只需要一键就可以重复调用。具体操作如下\n若你没有改过快捷键绑定，在文本编辑界面 ctrl + shift + B 就会弹出配置任务（tasks）的下拉栏 → 配置任务 → Others。一个名为tasks.json的文件会创建在.vscode文件夹内，这是vscode放置当前工作区配置的文件夹，不要删去。\n\n用下面的代码覆盖里面的内容，把注释的地方改成自己对应安装的。\n&#123;\n    // See https://go.microsoft.com/fwlink/?LinkId=733558\n    // for the documentation about the tasks.json format\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        &#123;\n            \"label\": \"lc3as asmble\",              //之后调用时显示的名字\n            \"type\": \"shell\",\n            \"command\": \"$HOME/bin/lc3as\",       //改成你的lc3as的路径\n            \"args\": [\n                \"$&#123;fileBasename&#125;\"               //command+args就是你给命令行的信号，这里相当于lc3as test.asm\n            ],\n            \"options\": &#123;\n                \"cwd\": \"$&#123;fileDirname&#125;\"\n            &#125;,\n            \"presentation\": &#123;\n                \"echo\": true,\n                \"reveal\": \"always\",\n                \"focus\": false,\n                \"panel\": \"shared\",\n                \"showReuseMessage\": true,\n                \"clear\": false\n            &#125;,\n            \"group\": \"build\",\n            \"problemMatcher\": []\n        &#125;,\n        &#123;\n            \"label\": \"lc3sim simulate\",\n            \"type\": \"shell\",\n            \"command\": \"$HOME/bin/lc3sim\",          //改成你的lc3sim的路径\n            \"args\": [\n                \"$&#123;fileBasenameNoExtension&#125;.obj\"    //这里相当于lc3sim test.obj\n            ],\n            \"options\": &#123;\n                \"cwd\": \"$&#123;fileDirname&#125;\"\n            &#125;,\n            \"presentation\": &#123;\n                \"echo\": true,\n                \"reveal\": \"always\",\n                \"focus\": true,\n                \"panel\": \"shared\",\n                \"showReuseMessage\": true,\n                \"clear\": true\n            &#125;,\n            \"group\": \"build\",\n            \"problemMatcher\": [],\n        &#125;,\n        &#123;\n            \"label\": \"lc3 CLI debug\",                  //这个task用来整合上面两个tasks，能一键编译加调试\n            \"type\": \"shell\",\n            \"dependsOrder\": \"sequence\",\n            \"dependsOn\": [\n                \"lc3as asmble\",\n                \"lc3sim simulate\"\n            ],\n            \"group\": \"build\",\n            \"problemMatcher\": []\n        &#125;\n    ]\n&#125;\n\n\n这样一来，回到文本编辑的地方就可以通过按下ctrl + shift + B 来调用tasks啦。调用成功🎉🎉🎉\n\n 6.3 调试的注意事项\n\n建议先用lc3 asmble测试编译，到编译成功后再用lc3sim来调试。\n因为直接用lc3sim相当于连着使用了lc3 asmble和lc3 simulate两个tasks，这样lc3as的输出会一闪而过，如果编译没有成功的话，.obj文件没有更新，调试的仍是修改前代码对应的.obj文件。\n用lc3sim调试完了之后，记得用 quit 命令退出，不然下一次不会进入新文件的调试环境。\n有测试文件或输出要求的也可以实现，就是新建几个对应命令的tasks，再用类似lc3sim的task连接起来。\ntasks文件的具体书写规则上📑官方文档看吧（不愿意看英文的可以 换一个脑子 用chrome网页翻译代替）。用好了能有骚操作，对别的语言也是如此。\n不知道能不能用debug功能实现和lc3sim的对接，没有研究，要是可以的话就能F5一键调试了。但是断点好像不能传递给lc3sim。😝反正我学完lc3了，以后都不用了，不折腾了。而且现在也挺方便。\n\n 7. 通过vscode可视化调试lc3程序【重点】❗❗\n单单把命令行的调试界面整合到vscode中似乎还不够方便，用vm的同学一个 lc3sim-tk 的图形化界面就把黑底白字的命令行比下去了。那既然都是重复调用命令，能不能也用tasks来启动图形化的调试界面呢？\n 7.1 win10子系统的图形化界面\n\n\n具体的方法就参照这篇教程来就行了。推荐使用第二个方法，也就是xming方案。这样可以让弹出的窗口和win的窗口并列，沉浸式的debug体验极佳。\nWin10子系统安装图形化界面的两种方法\n\n\n总结一下这篇教程里的具体命令操作，方便以后回看\n #第一种方法（远程桌面）\nsudo apt-get update\nsudo apt-get install xorg xfce4 xrdp\nsudo sed -i 's/port=3389/port=3390/g' /etc/xrdp/xrdp.ini\nsudo echo xfce4-session >~/.xsession\nsudo service xrdp restart\n#win自带的远程桌面连接到127.0.0.1:3390，127.0.0.1是本地机器的回送ip地址。\n\n#第二种方法\nsudo apt-get update\nsudo apt-get install xorg xfce4 openssh-server\n#windows安装xming，启动xming\nDISPLAY:=0 lc3sim-tk    #跟着你要启动的图形化程序命令\n#就可以在win中弹出linux的图形化窗口了\n\n\n一些小技巧\n\n进入xming launch可以选择不同的窗口显示方式。\n进入~/.bashrc，添加 alias D='DISPLAY:=0' ，可以把DISPLAY:=0化简成“D”，以后就可以用 D lc3sim-tk 来启动了\n\n\n\n 7.2 用vscode启动图形化调试界面\n原理还是一样，用tasks来代替重复输入命令。把下面的代码复制到tasks.json文件前几个tasks的后面，就可以了。\n&#123;\n    \"label\": \"lc3sim-tk simulate\",\n    \"type\": \"shell\",\n    \"command\": \"DISPLAY=:0\",\n    \"args\": [\n        \"/home/gavin/bin/lc3tools/lc3sim-tk\",  //改成你的lc3sim-tk的路径\n        \"$&#123;fileBasenameNoExtension&#125;.obj\"       //这里相当于DISPLAY:=0 lc3sim-tk test.obj\n    ],\n    \"options\": &#123;\n        \"cwd\": \"$&#123;fileDirname&#125;\"\n    &#125;,\n    \"presentation\": &#123;\n        \"echo\": false,                         //因为是图形化界面，所以就不用显示命令行的输出了\n        \"reveal\": \"never\"\n    &#125;\n    \"group\": \"build\",\n    \"problemMatcher\": [],\n&#125;,\n&#123;\n    \"label\": \"lc3 tk debug\",                  //这个task用来整合上编译和图形化的界面，能一键编译加调试\n    \"type\": \"shell\",\n    \"dependsOrder\": \"sequence\",\n    \"dependsOn\": [\n        \"lc3as asmble\",\n        \"lc3sim-tk simulate\"\n    ],\n    \"group\": \"build\",\n    \"problemMatcher\": []\n&#125;\n至此，图形化就完成了，所有vm中的所有功能关于lc3都能在vscode中实现了。✨🎉✨🎉\n\n .END\n","slug":"setup-wsl-lc3","date":"2019-10-23T06:06:05.000Z","categories_index":"Tech,vscode,wsl,ECE,lc3","tags_index":"vscode,wsl,lc3","author_index":"Gavin"}]