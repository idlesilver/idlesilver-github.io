{"title":"manim的安装","uid":"bcb190831e5d67086d3758fcbd5f11b9","slug":"install-manim","date":"2020-02-22T12:56:15.000Z","updated":"2022-06-15T17:46:44.686Z","comments":true,"path":"api/articles/install-manim.json","keywords":["Student","Blog","IT","tech","mechine learning"],"cover":"http://img.gavin-get-up.com/20210625205929.png","content":"<!-- 概要 -->\n<p><strong>manim</strong>是<strong>3B1B</strong>用来做演示视频的python库，涉及到代码控坐标系、图形、文字等。同时有一些进阶的内容，用于控制视频、音乐等。实例可见<a href=\"https://www.bilibili.com/video/BV12K4y1A7NA\">这个视频</a>。</p>\n<h1 id=\"目录\"><a class=\"markdownIt-Anchor\" href=\"#目录\"></a> 目录</h1>\n<p><ul class=\"markdownIt-TOC\">\n<li><a href=\"#%E7%9B%AE%E5%BD%95\">目录</a></li>\n<li><a href=\"#manim%E5%AE%89%E8%A3%85%E7%9A%84%E8%B8%A9%E5%9D%91\">manim安装的踩坑</a>\n<ul>\n<li><a href=\"#%E9%A6%96%E5%85%88%E6%98%AFpython%E7%9B%B8%E5%85%B3%E7%9A%84%E5%AE%89%E8%A3%85\">首先是python相关的安装</a></li>\n<li><a href=\"#%E7%84%B6%E5%90%8E%E6%98%AF%E5%85%B6%E4%BB%96%E7%9A%84%E4%BE%9D%E8%B5%96%E5%AE%89%E8%A3%85\">然后是其他的依赖安装</a></li>\n<li><a href=\"#%E5%B0%9D%E8%AF%95%E8%B7%91%E4%B8%80%E4%B8%8Bexample\">尝试跑一下example</a></li>\n<li><a href=\"#%E6%9C%80%E5%90%8E%E6%98%AF%E4%B8%80%E4%BA%9B%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%E7%9A%84%E8%AE%B0%E5%BD%95\">最后是一些出现的问题的记录</a></li>\n</ul>\n</li>\n</ul>\n</p>\n<h1 id=\"manim安装的踩坑\"><a class=\"markdownIt-Anchor\" href=\"#manim安装的踩坑\"></a> manim安装的踩坑</h1>\n<p>按道理说，跟着网上的教程来一步一步走是不会出问题的。但是我电脑内存快不够了，同时又想把manim装在WSL里，于是踩下了好多的坑。这里总结一下：</p>\n<h2 id=\"首先是python相关的安装\"><a class=\"markdownIt-Anchor\" href=\"#首先是python相关的安装\"></a> 首先是python相关的安装</h2>\n<ul>\n<li>用conda创建环境是可以的，这样可以一个系统多个版本。我用miniconda新建了环境，python版本3.7。这个环境中安装python依赖库还是推荐 <code>pip</code> git下来的 <code>requirements.txt</code> ，虽然conda里面用pip废一点点空间，但是真的方便很多，不用走弯路。</li>\n<li>总体来说就是conda建完环境之后跟着manim的 <code>readme.md</code> 来就行了。嫌速度慢可以换成清华源</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">conda create -n manim <span class=\"token assign-left variable\">python</span><span class=\"token operator\">=</span><span class=\"token number\">3.7</span> <span class=\"token comment\">#-n 表示环境的名称</span>\nconda activate manim\n<span class=\"token builtin class-name\">cd</span> <span class=\"token string\">\"the path of your project\"</span>\n<span class=\"token function\">git</span> clone https://github.com/3b1b/manim.git\n<span class=\"token builtin class-name\">cd</span> manim\npip3 <span class=\"token function\">install</span> manimlib\npython3 -m pip <span class=\"token function\">install</span> -r requirements.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"然后是其他的依赖安装\"><a class=\"markdownIt-Anchor\" href=\"#然后是其他的依赖安装\"></a> 然后是其他的依赖安装</h2>\n<ul>\n<li>\n<p><code>sox</code> 和<code>ffmpeg</code>应该没有问题，直接apt就行。cairo也是apt，命令上官网搜。但是tex出了问题。因为有两个win和wsl两个相对独立的环境，两边都装texlive硬盘容量吃不消，于是想压榨空间。但是很不巧，失败了。</p>\n<ul>\n<li>一开始为了省空间在wsl安装了 <code>miktex</code>，花了一点时间，但是相关的tex编辑器是可以用的（vscode的远程tex）。所以我就以为装好了。但是结果运行manim的时候出错了，报错信息如下。具体原因在svg_modules中，似乎是svg文件生成出错了。试了很多方法之后，发现问题出在miktex缺少一些tex组件。把miktex卸载了，重新装 <code>texlive-full</code> 就行了。</li>\n<li>嫌速度慢可以换成阿里源</li>\n</ul>\n  <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> sox ffmpeg texlive-full libcairo2-dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ul>\n<h2 id=\"尝试跑一下example\"><a class=\"markdownIt-Anchor\" href=\"#尝试跑一下example\"></a> 尝试跑一下example</h2>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python3 ./manim.py example_scenes.py OpeningManimExample-pl\npython3 ./manim.py example_scenes.py SquareToCircle -pl\npython3 ./manim.py example_scenes.py WarpSquare -pl\npython3 ./manim.py example_scenes.py WriteStuff -pl\npython3 ./manim.py example_scenes.py UpdatersExample -pl<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"最后是一些出现的问题的记录\"><a class=\"markdownIt-Anchor\" href=\"#最后是一些出现的问题的记录\"></a> 最后是一些出现的问题的记录</h2>\n<ul>\n<li>运行了example，发现SquareToCircle这样不涉及文字的可以正常运行，但是有文字组件的（TexMobjct）编译不能通过。会报错 <code>UserWarning: g0-84 not recognized</code> ，并回溯到 <code>break_up_by_substrings</code> 函数出现list index out of range。原因是生成的svg的元素没有正确读入svgMobject中，导致尝试索引一个空list。\n<ul>\n<li>解决方法是：卸载了miktex，安装texlive-full（texlive不行）。</li>\n</ul>\n</li>\n</ul>\n","feature":true,"text":" manim是3B1B用来做演示视频的python库，涉及到代码控坐标系、图形、文字等。同时有一些进阶的内容，用于控制视频、音乐等。实例可见这个视频。 目录 目录 manim安装的踩坑 首先是python相关的安装 然后是其他的依赖安装 尝试跑一下example 最后是一些出现的...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"Tech","slug":"Tech","count":8,"path":"api/categories/Tech.json"},{"name":"manim","slug":"Tech/manim","count":1,"path":"api/categories/Tech/manim.json"}],"tags":[{"name":"manim","slug":"manim","count":1,"path":"api/tags/manim.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\"> 目录</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#manim%E5%AE%89%E8%A3%85%E7%9A%84%E8%B8%A9%E5%9D%91\"><span class=\"toc-text\"> manim安装的踩坑</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A6%96%E5%85%88%E6%98%AFpython%E7%9B%B8%E5%85%B3%E7%9A%84%E5%AE%89%E8%A3%85\"><span class=\"toc-text\"> 首先是python相关的安装</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%84%B6%E5%90%8E%E6%98%AF%E5%85%B6%E4%BB%96%E7%9A%84%E4%BE%9D%E8%B5%96%E5%AE%89%E8%A3%85\"><span class=\"toc-text\"> 然后是其他的依赖安装</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%9D%E8%AF%95%E8%B7%91%E4%B8%80%E4%B8%8Bexample\"><span class=\"toc-text\"> 尝试跑一下example</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%80%E5%90%8E%E6%98%AF%E4%B8%80%E4%BA%9B%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%E7%9A%84%E8%AE%B0%E5%BD%95\"><span class=\"toc-text\"> 最后是一些出现的问题的记录</span></a></li></ol></li></ol>","author":{"name":"Gavin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"浙江大学国际学院，大四，炼丹人👨‍💻","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/svg/github.svg","link":"https://github.com/idlesilver"},"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/7091281/"}}}},"mapped":true,"prev_post":{"title":"VScode上写python的技巧","uid":"b2e8ef9771bf66e4bc1e63fecf6450a9","slug":"vscode-python","date":"2020-05-04T13:24:03.000Z","updated":"2022-06-15T17:46:44.688Z","comments":true,"path":"api/articles/vscode-python.json","keywords":["Student","Blog","IT","tech","mechine learning"],"cover":"http://img.gavin-get-up.com/20210625213124.png","text":" vscode对python的支持一直在跟进，目前已经可以直接使用 jupyter, python, pylance 这三个插件做到较好的支持，这篇博客主要介绍了之前的一些安装方式。 引子 因为cs225是基于python讲数据结构和算法的，作业又都是小组作业。于是就需要一个py...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"Tech","slug":"Tech","count":8,"path":"api/categories/Tech.json"},{"name":"vscode","slug":"Tech/vscode","count":3,"path":"api/categories/Tech/vscode.json"},{"name":"python","slug":"Tech/python","count":1,"path":"api/categories/Tech/python.json"},{"name":"jupyter","slug":"Tech/python/jupyter","count":1,"path":"api/categories/Tech/python/jupyter.json"}],"tags":[{"name":"vscode","slug":"vscode","count":3,"path":"api/tags/vscode.json"},{"name":"python","slug":"python","count":1,"path":"api/tags/python.json"},{"name":"jupyter","slug":"jupyter","count":1,"path":"api/tags/jupyter.json"}],"author":{"name":"Gavin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"浙江大学国际学院，大四，炼丹人👨‍💻","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/svg/github.svg","link":"https://github.com/idlesilver"},"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/7091281/"}}}},"feature":true},"next_post":{"title":"在wsl上写mp的辛酸血泪史","uid":"fb60864ba6c70d12dc9f40aaad0945f8","slug":"vscode-wsl-c","date":"2019-11-07T10:06:11.000Z","updated":"2022-06-15T17:46:44.689Z","comments":true,"path":"api/articles/vscode-wsl-c.json","keywords":["Student","Blog","IT","tech","mechine learning"],"cover":"http://img.gavin-get-up.com/20210625182945.png","text":" 大一学习ECE120时用vscode写C程 (课程的mp, machine problem) 的工作流，做了简单的记录。主要包括自动编译调试脚本，valgrind调试输出。以及在不同虚拟机平台调试C程的方法。因为是仅针对课程内容的环境调试，内容比较个性化，适合初学者使用，也能更...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"16 mins."},"categories":[{"name":"Tech","slug":"Tech","count":8,"path":"api/categories/Tech.json"},{"name":"vscode","slug":"Tech/vscode","count":3,"path":"api/categories/Tech/vscode.json"},{"name":"wsl","slug":"Tech/wsl","count":2,"path":"api/categories/Tech/wsl.json"},{"name":"ECE","slug":"Tech/ECE","count":2,"path":"api/categories/Tech/ECE.json"},{"name":"C","slug":"Tech/ECE/C","count":1,"path":"api/categories/Tech/ECE/C.json"}],"tags":[{"name":"vscode","slug":"vscode","count":3,"path":"api/tags/vscode.json"},{"name":"wsl","slug":"wsl","count":2,"path":"api/tags/wsl.json"},{"name":"C","slug":"C","count":1,"path":"api/tags/C.json"}],"author":{"name":"Gavin","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"浙江大学国际学院，大四，炼丹人👨‍💻","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"github":{"icon":"/svg/github.svg","link":"https://github.com/idlesilver"},"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/7091281/"}}}},"feature":true}}